{"mappings":"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","sources":["stamen/mapbox-gl-style-build/src/index.js","stamen/mapbox-gl-style-build/src/lib/build-style.js","stamen/mapbox-gl-style-build/src/lib/merge-variables.js"],"sourcesContent":["import { buildStyle } from \"./lib/build-style\";\nimport { mergeVariables } from \"./lib/merge-variables\";\n\nexport {\n  buildStyle,\n  mergeVariables\n};\n","#!/usr/bin/env node\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\n\n/**\n * Determine whether a value is or contains undefined within it\n *\n * @param {*} v - the value to check\n * @returns {boolean|array}\n */\nconst findUndefined = v => {\n  if (v == undefined) return true;\n\n  // For objects and arrays, we want to know the keys/indices\n  // that contain undefined values\n  if (typeof v === 'object' || Array.isArray(v)) {\n    const undefinedValues = Object.keys(v)\n      .map(key => {\n        const undefinedProps = findUndefined(v[key]);\n        if (!undefinedProps) return null;\n\n        // This is the leaf node, just return the key\n        if (typeof undefinedProps === 'boolean') return key;\n\n        // Undefined properties are deeper, include key and further branches\n        return { [key]: undefinedProps };\n      })\n      .filter(v => !!v);\n\n    return undefinedValues.length ? undefinedValues : false;\n  }\n\n  return false;\n};\n\n/**\n * Check built layer for validity\n *\n * @param {object} layer - the layer to check\n * @returns {array} an array of validation messages\n */\nconst validateLayer = layer => {\n  let messages = [];\n\n  const undefinedProps = findUndefined(layer);\n  if (undefinedProps?.length) {\n    messages = [\n      ...messages,\n      ...undefinedProps.map(undefinedProp => {\n        return `Undefined property at ${JSON.stringify(undefinedProp)}`;\n      })\n    ];\n  }\n\n  return messages;\n};\n\n/**\n * Extend a baseStyle with the given overrides.\n *\n * paint and layout overrides do not fully overwrite paint and layout values in\n * the baseStyle, however, they add or replaces specific properties. In this\n * way, an overrides object can specify a single paint property to modify or add\n * without overwriting all of the paint properties of the baseStyle.\n *\n * @param {object} baseStyle\n * @param {object} overrides\n * @returns {object}\n */\nconst extend = (baseStyle, overrides) => {\n  const extended = { ...baseStyle };\n\n  Object.entries(overrides).forEach(([k, v]) => {\n    if (k === 'layout' || k === 'paint') {\n      extended[k] = { ...extended[k], ...v };\n    } else {\n      extended[k] = v;\n    }\n  });\n\n  return extended;\n};\n\n/**\n * Get a useful error message when something goes wrong while building a layer\n *\n * Avoid stack traces, try to find error description and line in the layer file.\n *\n * @param {Error} error - the error object thrown\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {string}\n */\nconst getLayerBuildErrorMessage = (error, name, path) => {\n  const { stack } = error;\n\n  // Get first \"at\" line of stack trace, split : to get line number\n  const lineNumber = stack.split('\\n')[1].split(':')[1];\n\n  // Load file and get the line at the given lineNumber\n  const layerFile = fs.readFileSync(path, 'utf8');\n  const layerLine = layerFile.split('\\n')[lineNumber - 1];\n\n  return `${chalk.red.bold('Error:')} Couldn't build layer ${chalk.blue(name)}.\n\nDetails: ${error.message} in\n  ${chalk.blue(path)}\n\n${lineNumber}: ${layerLine}`;\n};\n\n/**\n * Nicely format a file load error message\n *\n * @param {string} fileType - 'layer' or 'style'\n * @param {string} name - the name of the file being loaded\n * @param {string} path - the file path being loaded\n * @returns {string}\n */\nconst getFileLoadErrorMessage = (fileType, name, path) => {\n  return `${chalk.red.bold('Error:')} Couldn't load ${fileType} ${chalk.blue(\n    name\n  )}, does it exist? Attempted to load from\n\n  ${chalk.blue(path)}`;\n};\n\n/**\n * Nicely format and log validation messages for a style\n *\n * @param {string} style - the name of the style\n * @param {object} validationMessages - the validation messages, keyed by layer name\n * @returns {Void}\n */\nconst logValidationMessages = (style, validationMessages) => {\n  console.warn(`Found issues in style ${chalk.blue(style)}:`);\n\n  Object.keys(validationMessages).forEach(layer => {\n    console.warn(`  Layer ${chalk.blue(layer)}:`);\n    validationMessages[layer].forEach(message => {\n      console.warn(`    ${message}`);\n    });\n  });\n\n  console.warn('');\n};\n\n/**\n * Load the function that will build the layer.\n *\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {function} the layer builder\n */\nconst loadLayerBuilder = (name, path) => {\n  try {\n    return require(path).default;\n  } catch (error) {\n    throw new Error(getFileLoadErrorMessage('layer', name, path));\n  }\n};\n\n/**\n * Load a style, wrapped here to catch and format errors.\n *\n * @param {string} path - the file path to the style\n * @param {string} name - the style name\n * @returns {object}\n */\nconst loadStyle = (name, path) => {\n  try {\n    return require(path);\n  } catch (error) {\n    throw new Error(getFileLoadErrorMessage('style', name, path));\n  }\n};\n\n/**\n * Build a layer\n *\n * @param {object} context - the context, which contains variables for the layer\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {object}\n */\nconst buildLayer = (context, name, path) => {\n  const builder = loadLayerBuilder(name, path);\n\n  let layer;\n  try {\n    layer = builder(context);\n  } catch (error) {\n    throw new Error(getLayerBuildErrorMessage(error, name, path));\n  }\n\n  return extend(layer.baseStyle, layer.overrides);\n};\n\n/**\n * Build style\n *\n * @param {string} name - the name of the style to build\n * @param {string} styleDir - the input directory that contains styles\n * @param {string} layerDir - the input directory that contains layers\n * @returns {Object}\n */\nexport const buildStyle = (stylePath, layerDir, options = {}) => {\n  if (!stylePath) {\n    throw new Error('Must provide stylePath.');\n  }\n  if (!layerDir) {\n    throw new Error('Must provide layerDir.');\n  }\n\n  const name = path.basename(stylePath, '.js');\n\n  const verbose = options?.verbose ?? false;\n\n  const { context, template } = loadStyle(name, path.resolve(stylePath));\n\n  const styleJson = JSON.parse(JSON.stringify(template));\n\n  let validationMessages = {};\n\n  if (verbose) {\n    console.log(`Building style ${chalk.blue(name)}`);\n  }\n\n  styleJson.layers = template.layers.map(layerName => {\n    if (verbose) {\n      console.log(`  Adding layer ${chalk.blue(layerName)}`);\n    }\n\n    const layerPath = path.resolve(layerDir, `${layerName}.js`);\n    const layer = buildLayer(context, layerName, layerPath);\n\n    // Collect validation messages for each layer\n    const layerValidationMessages = validateLayer(layer);\n    if (layerValidationMessages.length) {\n      validationMessages[layerName] = layerValidationMessages;\n    }\n\n    return layer;\n  });\n\n  if (Object.keys(validationMessages).length > 0) {\n    logValidationMessages(name, validationMessages);\n  }\n\n  return styleJson;\n};\n","const isObject = v => typeof v === 'object' && !Array.isArray(v) && !!v;\n\n/**\n * Merge the current object of variables with an extender object. Variables\n * defined in extender will override variables defined in the current variables,\n * if there is overlap. Nested variables are taken into account.\n * @param {Object} current - the original variable object\n * @param {Object} extender - the extender variable object, containing overrides\n * @returns {Object} - the merged variables\n */\nconst merge = (current, extender) => {\n  const merged = JSON.parse(JSON.stringify(current));\n\n  Object.keys(extender).forEach(k => {\n    // Handle nested variables\n    if (isObject(current[k]) && isObject(extender[k])) {\n      merged[k] = merge(current[k], extender[k]);\n    }\n    else {\n      merged[k] = JSON.parse(JSON.stringify(extender[k]));\n    }\n  });\n\n  return merged;\n};\n\n\n/**\n * Merge any number of variable objects\n * @param {...Object} variableGroups - one or many variable objects, each \n * passed as a separate parameter\n * @returns {Object} the merged variable object\n */\nexport const mergeVariables = (...variableGroups) => {\n  return variableGroups.reduce((acc, cur) => merge(acc, cur), {});\n};\n"],"names":[],"version":3,"file":"module.js.map"}