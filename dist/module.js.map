{"mappings":"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","sources":["src/index.js","src/lib/build-style.js","src/lib/primitive-utils.js","src/lib/merge-overrides.js","src/lib/merge-variables.js","src/lib/modify-number-variables.js","src/lib/create-template.js"],"sourcesContent":["import { buildStyle } from './lib/build-style';\nimport { mergeOverrides } from './lib/merge-overrides';\nimport { mergeVariables } from './lib/merge-variables';\nimport { modifyNumberVariables } from './lib/modify-number-variables';\nimport {\n  createLayerTemplate,\n  createVariantTemplate\n} from './lib/create-template';\n\nexport {\n  mergeOverrides,\n  buildStyle,\n  mergeVariables,\n  modifyNumberVariables,\n  createLayerTemplate,\n  createVariantTemplate\n};\n","#!/usr/bin/env node\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport cloneDeep from 'lodash.clonedeep';\nimport isPlainObject from 'lodash.isplainobject';\nimport { removeEmpty, deleteProp } from './primitive-utils';\nimport { mergeOverrides } from './merge-overrides';\n\n/**\n * Check if a file exists\n *\n * @param {string} path - the file path\n * @return {boolean} whether the file exists\n */\nconst fileExists = path => {\n  try {\n    fs.accessSync(path, fs.constants.R_OK);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Determine whether a value is or contains undefined within it\n *\n * @param {*} v - the value to check\n * @returns {boolean|array}\n */\nconst findUndefined = v => {\n  if (v == undefined) return true;\n\n  // For objects and arrays, we want to know the keys/indices\n  // that contain undefined values\n  if (typeof v === 'object' || Array.isArray(v)) {\n    const undefinedValues = Object.keys(v)\n      .map(key => {\n        const undefinedProps = findUndefined(v[key]);\n        if (!undefinedProps) return null;\n\n        // This is the leaf node, just return the key\n        if (typeof undefinedProps === 'boolean') return key;\n\n        // Undefined properties are deeper, include key and further branches\n        return { [key]: undefinedProps };\n      })\n      .filter(v => !!v);\n\n    return undefinedValues.length ? undefinedValues : false;\n  }\n\n  return false;\n};\n\n/**\n * Check built layer for validity\n *\n * @param {object} layer - the layer to check\n * @returns {array} an array of validation messages\n */\nconst validateLayer = layer => {\n  let messages = [];\n\n  const undefinedProps = findUndefined(layer);\n  if (undefinedProps?.length) {\n    messages = [\n      ...messages,\n      ...undefinedProps.map(undefinedProp => {\n        return `Undefined property at ${JSON.stringify(undefinedProp)}`;\n      })\n    ];\n  }\n\n  return messages;\n};\n\n/**\n * Get a useful error message when something goes wrong while building a layer\n *\n * Avoid stack traces, try to find error description and line in the layer file.\n *\n * @param {Error} error - the error object thrown\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {string}\n */\nconst getLayerBuildErrorMessage = (error, name, path) => {\n  const { stack } = error;\n\n  // Get first \"at\" line of stack trace, split : to get line number\n  const lineNumber = stack.split('\\n')[1].split(':')[1];\n\n  // Load file and get the line at the given lineNumber\n  const layerFile = fs.readFileSync(path, 'utf8');\n  const layerLine = layerFile.split('\\n')[lineNumber - 1];\n\n  return `${chalk.red.bold('Error:')} Couldn't build layer ${chalk.blue(name)}.\n\nDetails: ${error.message} in\n  ${chalk.blue(path)}\n\n${lineNumber}: ${layerLine}`;\n};\n\n/**\n * Nicely format a file does not exist error message\n *\n * @param {string} fileType - 'layer' or 'style'\n * @param {string} name - the name of the file being loaded\n * @param {string} path - the file path being loaded\n * @returns {string}\n */\nconst getFileDoesNotExistMessage = (fileType, name, path) => {\n  return `\\n${chalk.red.bold('Error:')} Couldn't load ${fileType} ${chalk.blue(\n    name\n  )}, does it exist? Attempted to load from\n  ${chalk.blue(path)}\n`;\n};\n\n/**\n * Nicely format a file error message\n *\n * @param {string} fileType - 'layer' or 'style'\n * @param {string} name - the name of the file being loaded\n * @param {string} path - the file path being loaded\n * @param {string} error - the error message\n * @returns {string}\n */\nconst getFileErrorMessage = (fileType, name, path, error) => {\n  return `\\n${chalk.red.bold('Error:')} Couldn't load ${fileType} ${chalk.blue(\n    name\n  )}. Received this error:\n\n${chalk.red(error.stack)}\n`;\n};\n\n/**\n * Nicely format and log validation messages for style layers\n *\n * @param {object} validationMessages - the validation messages, keyed by layer name\n * @returns {Void}\n */\nconst logLayerValidationMessages = validationMessages => {\n  Object.keys(validationMessages).forEach(layer => {\n    console.warn(`  Layer ${chalk.blue(layer)}:`);\n    validationMessages[layer].forEach(message => {\n      console.warn(`    ${message}`);\n    });\n  });\n\n  console.warn('');\n};\n\n/**\n * Load the function that will build the layer.\n *\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {function} the layer builder\n */\nconst loadLayerBuilder = (name, path) => {\n  if (!fileExists(path)) {\n    throw new Error(getFileDoesNotExistMessage('layer', name, path));\n  }\n\n  try {\n    return require(path).default;\n  } catch (error) {\n    throw new Error(getFileErrorMessage('layer', name, path, error));\n  }\n};\n\n/**\n * Load a style, wrapped here to catch and format errors.\n *\n * @param {string} path - the file path to the style\n * @param {string} name - the style name\n * @returns {object}\n */\nconst loadStyle = (name, path) => {\n  if (!fileExists(path)) {\n    throw new Error(getFileDoesNotExistMessage('style', name, path));\n  }\n\n  try {\n    return require(path);\n  } catch (error) {\n    throw new Error(getFileErrorMessage('style', name, path, error));\n  }\n};\n\n/**\n * Build a layer\n *\n * @param {object} context - the context, which contains variables for the layer\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {object}\n */\nconst buildLayer = (context, name, path) => {\n  const builder = loadLayerBuilder(name, path);\n\n  let layer;\n  let contextMatches;\n  try {\n    layer = builder(context);\n    const fileStr = fs.readFileSync(path, 'utf8');\n    contextMatches = fileStr.match(/context(?:\\.\\w+)+/g) ?? [];\n  } catch (error) {\n    throw new Error(getLayerBuildErrorMessage(error, name, path));\n  }\n\n  return {\n    layer: mergeOverrides(layer.baseStyle, layer.overrides),\n    usedContext: contextMatches\n  };\n};\n\n/**\n * Build style\n *\n * @param {string} name - the name of the style being built\n * @param {string} absoluteStylePath - the input directory that contains styles\n * @param {string} layerDir - the input directory that contains layers\n * @returns {Object}\n */\nexport const buildStyle = (name, absoluteStylePath, layerDir, options = {}) => {\n  if (!absoluteStylePath) {\n    throw new Error('Must provide absoluteStylePath.');\n  }\n  if (!layerDir) {\n    throw new Error('Must provide layerDir.');\n  }\n\n  const verbose = options?.verbose ?? false;\n\n  const { context, template } = loadStyle(\n    name,\n    path.resolve(absoluteStylePath)\n  );\n\n  const styleJson = JSON.parse(JSON.stringify(template));\n\n  let validationMessages = {};\n\n  if (verbose) {\n    console.log(`Building style ${chalk.blue(name)}`);\n  }\n\n  let unusedContext = cloneDeep(context);\n  let usedContextPaths = [];\n\n  styleJson.layers = template.layers.map(layerName => {\n    if (verbose) {\n      console.log(`  Adding layer ${chalk.blue(layerName)}`);\n    }\n\n    const layerPath = path.resolve(layerDir, `${layerName}.js`);\n    const { layer, usedContext } = buildLayer(context, layerName, layerPath);\n\n    // Create path strings of used context\n    usedContextPaths = usedContextPaths.concat(\n      cloneDeep(usedContext).map(str => str.split('.').slice(1).join('.'))\n    );\n\n    // Use used context to filter context down to what is not used\n    usedContext\n      .map(str => str.split('.').slice(1))\n      .forEach(contextPath => {\n        unusedContext = deleteProp(unusedContext, contextPath);\n      });\n\n    // Collect validation messages for each layer\n    const layerValidationMessages = validateLayer(layer);\n    if (layerValidationMessages.length) {\n      validationMessages[layerName] = layerValidationMessages;\n    }\n\n    return layer;\n  });\n\n  unusedContext = removeEmpty(unusedContext);\n\n  if (Object.keys(validationMessages).length > 0) {\n    console.warn(`Found issues in style ${chalk.blue(name)}:`);\n    logLayerValidationMessages(validationMessages);\n  }\n\n  // Flattens nested object to be one level with keys using periods to represent nesting\n  const flattenObject = (obj, prefix = '') =>\n    Object.keys(obj).reduce((acc, k) => {\n      const pre = prefix.length ? prefix + '.' : '';\n      if (isPlainObject(obj[k]))\n        Object.assign(acc, flattenObject(obj[k], pre + k));\n      else acc[pre + k] = obj[k];\n      return acc;\n    }, {});\n\n  const unusedContextPaths = Object.keys(flattenObject(unusedContext));\n\n  return { styleJson, unusedContextPaths, usedContextPaths };\n};\n","// Helper functions for unused context\nimport isPlainObject from 'lodash.isplainobject';\nimport isEmpty from 'lodash.isempty';\n\nexport const deleteProp = (object, path) => {\n  var last = path.pop();\n  let next = JSON.parse(JSON.stringify(object));\n  delete path.reduce((o, k) => o[k] || {}, next)[last];\n  return next;\n};\n\nexport const removeEmpty = o => {\n  for (var k in o) {\n    if (!o[k] || !isPlainObject(o[k])) {\n      continue;\n    }\n    removeEmpty(o[k]);\n    if (isEmpty(o[k])) {\n      delete o[k];\n    }\n  }\n  return o;\n};\n","import cloneDeep from 'lodash.clonedeep';\n\n/**\n * Merge overrides with a baseStyle or other overrides\n *\n * paint and layout overrides do not fully overwrite paint and layout values in\n * the baseStyle, however, they add or replaces specific properties. In this\n * way, an overrides object can specify a single paint property to modify or add\n * without overwriting all of the paint properties of the baseStyle.\n *\n * @param {object} baseStyle\n * @param {object} overrides\n * @returns {object}\n */\nexport const mergeOverrides = (baseStyle, overrides) => {\n  const extended = cloneDeep(baseStyle);\n\n  Object.entries(overrides).forEach(([k, v]) => {\n    if (k === 'layout' || k === 'paint') {\n      extended[k] = { ...extended[k], ...v };\n    } else {\n      extended[k] = v;\n    }\n  });\n\n  return extended;\n};\n","const isObject = v => typeof v === 'object' && !Array.isArray(v) && !!v;\n\n/**\n * Merge the current object of variables with an extender object. Variables\n * defined in extender will override variables defined in the current variables,\n * if there is overlap. Nested variables are taken into account.\n * @param {Object} current - the original variable object\n * @param {Object} extender - the extender variable object, containing overrides\n * @returns {Object} - the merged variables\n */\nconst merge = (current, extender) => {\n  const merged = JSON.parse(JSON.stringify(current));\n\n  Object.keys(extender).forEach(k => {\n    // Handle nested variables\n    if (isObject(current[k]) && isObject(extender[k])) {\n      merged[k] = merge(current[k], extender[k]);\n    }\n    else {\n      merged[k] = JSON.parse(JSON.stringify(extender[k]));\n    }\n  });\n\n  return merged;\n};\n\n\n/**\n * Merge any number of variable objects\n * @param {...Object} variableGroups - one or many variable objects, each \n * passed as a separate parameter\n * @returns {Object} the merged variable object\n */\nexport const mergeVariables = (...variableGroups) => {\n  return variableGroups.reduce((acc, cur) => merge(acc, cur), {});\n};\n","/**\n * Returns a new function that divides a number by the modifier passed here\n * @param {number} divisor - number to divide by in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getDivideFn = divisor => {\n  return num => num / divisor;\n};\n/**\n * Returns a new function that subtracts from a number by the modifier passed here\n * @param {number} toSubtract - number to subtract in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getSubtractFn = toSubtract => {\n  return num => num - toSubtract;\n};\n/**\n * Returns a new function that adds to a number by the modifier passed here\n * @param {number} toAdd - number to add in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getAddFn = toAdd => {\n  return num => num + toAdd;\n};\n/**\n * Returns a new function that multiplies a number by the modifier passed here\n * @param {number} multiplier - number to multiply by in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getMultiplyFn = multiplier => {\n  return num => num * multiplier;\n};\n\n/**\n * Modifies the property value after the transform function using options\n * @param {Array|number} value - property value of the variable\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Array|number} - the modified property values from the options\n */\nconst handleOptions = (value, options) => {\n  const { round, floor, ceil, toFixed } = options;\n  if (round) return Math.round(value);\n  if (floor) return Math.floor(value);\n  if (ceil) return Math.ceil(value);\n  if (toFixed !== undefined) return Number(value.toFixed(toFixed));\n  return value;\n};\n\n/**\n * Modifies the property value of the variable with the transform function\n * @param {Array|number} propertyValue - property value of the variable\n * @param {Function} fn - function to run the value or expression output values through\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Array|number} - the modified property values\n */\nconst modifyValue = (propertyValue, fn, options) => {\n  if (typeof propertyValue === 'number') {\n    return handleOptions(fn(propertyValue), options);\n  }\n  if (!Array.isArray(propertyValue)) return propertyValue;\n\n  const expressionType = propertyValue[0];\n  let sliceIndex;\n  let outputCondition;\n  let fallback;\n\n  switch (expressionType) {\n    case 'interpolate':\n    case 'interpolate-hcl':\n    case 'interpolate-lab': {\n      sliceIndex = 3;\n      outputCondition = i => i % 2 !== 0;\n      break;\n    }\n    case 'step': {\n      sliceIndex = 2;\n      outputCondition = i => i % 2 === 0;\n      break;\n    }\n    case 'case': {\n      sliceIndex = 1;\n      outputCondition = i => i % 2 !== 0;\n      fallback = propertyValue.pop();\n      break;\n    }\n    case 'match': {\n      sliceIndex = 2;\n      outputCondition = i => i % 2 !== 0;\n      fallback = propertyValue.pop();\n      break;\n    }\n  }\n\n  // Rebuild modified expression\n  const nextValue = propertyValue.slice(0, sliceIndex);\n  const inputOutputs = propertyValue.slice(sliceIndex);\n  inputOutputs.forEach((val, i) => {\n    if (outputCondition(i)) {\n      nextValue.push(modifyValue(val, fn, options));\n    } else {\n      nextValue.push(val);\n    }\n  });\n  if (fallback !== undefined) {\n    nextValue.push(modifyValue(fallback, fn, options));\n  }\n\n  return nextValue;\n};\n\n/**\n * Recurses the variables object to find the actual property values\n * @param {Object|Array|number} variables - the original variable object or variable\n * @param {Function} fn - function to run the value or expression output values through\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Object} - the modified variables\n */\nconst replaceVariables = (variables, fn, options) => {\n  if (typeof variables !== 'object' || Array.isArray(variables)) {\n    return modifyValue(variables, fn, options);\n  }\n  return Object.keys(variables).reduce((acc, key) => {\n    acc[key] = replaceVariables(variables[key], fn, options);\n    return acc;\n  }, {});\n};\n\n/**\n * Modify number values in variables using a math operation\n * @param {Object|Array|number} variables - the original variable object or variable\n * @param {string} operator - Math operation, one of - '*', '/', '+', '-'\n * @param {number} modifier - number argument to modify value by\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Object} - the modified variables\n */\nconst modifyNumberVariables = (variables, operator, modifier, options = {}) => {\n  let nextVariables = JSON.parse(JSON.stringify(variables));\n  let mathFn = num => num;\n\n  switch (operator) {\n    case '*': {\n      mathFn = getMultiplyFn(modifier);\n      break;\n    }\n    case '/': {\n      mathFn = getDivideFn(modifier);\n      break;\n    }\n    case '+': {\n      mathFn = getAddFn(modifier);\n      break;\n    }\n    case '-': {\n      mathFn = getSubtractFn(modifier);\n      break;\n    }\n    default: {\n      throw new Error(`${operator} is not a valid operator.`);\n    }\n  }\n\n  nextVariables = replaceVariables(variables, mathFn, options);\n\n  return nextVariables;\n};\n\nexport { modifyNumberVariables };\n","import stringifyPretty from 'json-stringify-pretty-compact';\nimport { latest } from '@mapbox/mapbox-gl-style-spec';\n\nexport const createLayerTemplate = (baseLayer, variants) => {\n  let layer = baseLayer;\n  if (!layer) layer = Object.values(variants)[0];\n\n  let baseStyle = stringifyPretty(layer, { indent: 2 })\n    .split('\\n')\n    .join('\\n  ');\n\n  let allOverrides = '';\n\n  // TODO currently making the primary differentiator style id until we sort differences\n  for (const styleName in variants) {\n    let overrides = {};\n\n    if (layer && Object.keys(variants).length) {\n      let variantLayer = variants[styleName];\n\n      Object.entries(variantLayer).forEach(([k, v]) => {\n        if (k === 'layout' || k === 'paint') return;\n        if (JSON.stringify(v) === JSON.stringify(layer[k])) return;\n        overrides[k] = v;\n      });\n\n      if (variantLayer.layout) {\n        // If a property does not exist on a variant, override with the default\n        const defaultLayout = Object.keys(layer.layout || {}).reduce(\n          (acc, k) => {\n            acc[k] = latest[`layout_${layer.type}`][k].default;\n            return acc;\n          },\n          {}\n        );\n\n        const fullLayout = { ...defaultLayout, ...variantLayer.layout };\n\n        Object.entries(fullLayout).forEach(([k, v]) => {\n          if (JSON.stringify(v) === JSON.stringify(layer?.layout?.[k])) return;\n          if (!overrides.layout) overrides.layout = {};\n          overrides.layout[k] = v;\n        });\n      }\n\n      if (variantLayer.paint) {\n        // If a property does not exist on a variant, override with the default\n        const defaultPaint = Object.keys(layer.paint || {}).reduce((acc, k) => {\n          acc[k] = latest[`paint_${layer.type}`][k].default;\n          return acc;\n        }, {});\n\n        const fullPaint = { ...defaultPaint, ...variantLayer.paint };\n\n        Object.entries(fullPaint).forEach(([k, v]) => {\n          if (JSON.stringify(v) === JSON.stringify(layer?.paint?.[k])) return;\n          if (!overrides.paint) overrides.paint = {};\n          overrides.paint[k] = v;\n        });\n      }\n    }\n    overrides = stringifyPretty(overrides, { indent: 2 })\n      .split('\\n')\n      .join('\\n    ');\n\n    allOverrides += `${\n      !!allOverrides ? ' else if' : 'if'\n    } (context.styleName === '${styleName}') {\n      overrides = ${overrides};\n  }`;\n  }\n\n  const fileContent = `module.exports.default = (context) => {\n  const baseStyle = ${baseStyle};\n  let overrides = {};\n  ${allOverrides}\n  return {\n    baseStyle,\n    overrides\n  };\n};`;\n\n  return fileContent;\n};\n\nexport const createVariantTemplate = style => {\n  const templateStyle = {\n    ...style,\n    layers: style.layers.map(l => l.id)\n  };\n\n  const fileContent = `module.exports.context = {\n  colors: {\n  },\n  styleName: '${style.name}'\n};\n\nmodule.exports.template = ${JSON.stringify(templateStyle, null, 2)};\n`;\n\n  return fileContent;\n};\n"],"names":["_buildStyle","require","_mergeOverrides","_mergeVariables","_modifyNumberVariables","_createTemplate","Object","defineProperty","exports","value","buildStyle","_fs","_interopRequireDefault","_path","_chalk","_lodash","_lodash2","_primitiveUtils","obj","__esModule","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","_defineProperty","key","_toPropertyKey","enumerable","configurable","writable","arg","_toPrimitive","_typeof","String","input","hint","prim","toPrimitive","undefined","res","Number","fileExists","path","fs","accessSync","constants","R_OK","e","findUndefined","v","undefinedValues","keys","map","undefinedProps","filter","validateLayer","layer","messages","concat","undefinedProp","JSON","stringify","getLayerBuildErrorMessage","error","stack","lineNumber","split","layerFile","readFileSync","layerLine","chalk","red","bold","blue","message","getFileDoesNotExistMessage","fileType","getFileErrorMessage","logLayerValidationMessages","validationMessages","forEach","console","warn","loadLayerBuilder","Error","loadStyle","buildLayer","context","builder","contextMatches","_fileStr$match","fileStr","match","mergeOverrides","baseStyle","overrides","usedContext","absoluteStylePath","layerDir","_options$verbose","options","arguments","verbose","_loadStyle","resolve","template","styleJson","parse","log","unusedContext","cloneDeep","usedContextPaths","layers","layerName","layerPath","_buildLayer","str","join","contextPath","deleteProp","layerValidationMessages","removeEmpty","flattenObject","prefix","reduce","acc","k","pre","isPlainObject","assign","unusedContextPaths","object","last","pop","next","isEmpty","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","target","source","getOwnPropertyDescriptors","defineProperties","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_i","_s","_e","_x","_r","_arr","_n","_d","done","err","extended","entries","_ref","_ref2","isObject","merge","current","extender","merged","mergeVariables","_len","variableGroups","_key","cur","getDivideFn","divisor","num","getSubtractFn","toSubtract","getAddFn","toAdd","getMultiplyFn","multiplier","handleOptions","round","floor","ceil","toFixed","Math","modifyValue","propertyValue","fn","expressionType","sliceIndex","outputCondition","fallback","nextValue","inputOutputs","val","replaceVariables","variables","modifyNumberVariables","operator","modifier","nextVariables","mathFn","_jsonStringifyPrettyCompact","_mapboxGlStyleSpec","createLayerTemplate","baseLayer","variants","values","stringifyPretty","indent","allOverrides","_loop","variantLayer","styleName","layout","defaultLayout","latest","type","fullLayout","_ref3","_layer","_layer$layout","_ref4","paint","defaultPaint","fullPaint","_ref5","_layer2","_layer2$paint","_ref6","fileContent","createVariantTemplate","style","templateStyle","l","id"],"version":3,"file":"module.js.map"}