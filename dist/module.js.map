{"mappings":";;;;;;;;;;A,C;A,M,C,c,C,yB,E,C,a,C;I,K,E,I;A,C;A,M,C,c,C,yB,E,C,a,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,oC;I,C;A,C;A,M,C,c,C,yB,E,C,sB,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,6C;I,C;A,C;A,M,C,c,C,yB,E,C,wB,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,+C;I,C;A,C;A,M,C,c,C,yB,E,C,iB,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,wC;I,C;A,C;A,M,C,c,C,yB,E,C,iB,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,wC;I,C;A,C;A,M,C,c,C,yB,E,C,wB,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,+C;I,C;A,C;;A,C;A,M,C,c,C,yB,E,C,a,C;I,K,E,I;A,C;A,yB,C,U,G,I,C,C;;ACCA,GAAA,CAAA,yBAAA,GAAA,4CAAA,CAAA,SAAA;;AACA,GAAA,CAAA,2BAAA,GAAA,4CAAA,CAAA,WAAA;;AACA,GAAA,CAAA,4BAAA,GAAA,4CAAA,CAAA,YAAA;;AACA,GAAA,CAAA,6BAAA,GAAA,4CAAA,CAAA,sBAAA;;AACA,GAAA,CAAA,8BAAA,GAAA,4CAAA,CAAA,0BAAA;;A,C;A,M,C,c,C,yB,E,C,a,C;I,K,E,I;A,C;A,yB,C,W,G,yB,C,U,G,I,C,C;;ACJA,GAAA,CAAA,6BAAA,GAAA,4CAAA,CAAA,0BAAA;;AACA,GAAA,CAAA,8BAAA,GAAA,4CAAA,CAAA,oBAAA;S,4C,C,G,E,C;I,M,C,G,I,G,C,U,G,G,G,C;Q,C,U,G;I,C;A,C;AAFA,EAAA,AAAA,oCAAA;AAIO,GAAA,CAAM2F,gCAAU,GAAG,QAAA,CAAbA,UAAa,CAACC,MAAD,EAAS3F,IAAT,EAAkB,CAArC;IACL,GAAA,CAAI4F,IAAI,GAAG5F,IAAI,CAAC6F,GAAL;IACX,GAAA,CAAIC,IAAI,GAAGvE,IAAI,CAAC6C,KAAL,CAAW7C,IAAI,CAACC,SAAL,CAAemE,MAAf;IACtB,MAAA,CAAO3F,IAAI,CAACoF,MAAL,CAAY,QAAA,CAACW,CAAD,EAAIT,CAAJ,EAAnB,CAAA;QAAmB,MAAA,CAAUS,CAAC,CAACT,CAAD,KAAO,CAAA;QAAA,CAAlB;IAAA,CAAZ,EAAkCQ,IAAlC,EAAwCF,IAAxC;IACP,MAAA,CAAOE,IAAP;AACD,CALM;A,yB,C,U,G,gC;AAOA,GAAA,CAAME,iCAAW,GAAG,QAAA,CAAdA,WAAc,CAAAD,CAAC,EAAI,CAAzB;IACL,GAAA,CAAK,GAAA,CAAIT,CAAT,IAAcS,CAAd,CAAiB,CAAjB;QACE,EAAA,GAAKA,CAAC,CAACT,CAAD,UAAQ,6BAAA,CAAA,CAAA,WAAcS,CAAC,CAACT,CAAD,IAC3B,QAAA;QAEFU,WAAW,CAACD,CAAC,CAACT,CAAD;QACb,EAAA,MAAI,8BAAA,CAAA,CAAA,WAAQS,CAAC,CAACT,CAAD,IACX,MAAA,CAAOS,CAAC,CAACT,CAAD;IAEX,CAAA;IACD,MAAA,CAAOS,CAAP;AACD,CAXM;A,yB,C,W,G,iC;;;;A,C;A,M,C,c,C,yB,E,C,a,C;I,K,E,I;A,C;A,yB,C,c,G,I,C,C;;ACXP,GAAA,CAAA,6BAAA,GAAA,4CAAA,CAAA,sBAAA;S,4C,C,G,E,C;I,M,C,G,I,G,C,U,G,G,G,C;Q,C,U,G;I,C;A,C;S,6B,C,M,E,c,E,C;I,G,C,I,G,M,C,I,C,M;I,E,E,M,C,qB,E,C;Q,G,C,O,G,M,C,qB,C,M;Q,c,K,O,G,O,C,M,C,Q,C,G,E,C;Y,M,C,M,C,wB,C,M,E,G,E,U;Q,C,I,I,C,I,C,K,C,I,E,O;I,C;I,M,C,I;A,C;S,mC,C,M,E,C;I,G,C,G,C,C,G,C,E,C,G,S,C,M,E,C,G,C;Q,G,C,M,G,I,I,S,C,C,I,S,C,C,I,C;Q,C;Q,C,G,C,G,6B,C,M,C,M,I,C,E,O,C,Q,C,G,E,C;Y,qC,C,M,E,G,E,M,C,G;Q,C,I,M,C,yB,G,M,C,gB,C,M,E,M,C,yB,C,M,K,6B,C,M,C,M,G,O,C,Q,C,G,E,C;Y,M,C,c,C,M,E,G,E,M,C,wB,C,M,E,G;Q,C;I,C;I,M,C,M;A,C;S,qC,C,G,E,G,E,K,E,C;I,E,E,G,I,G,E,M,C,c,C,G,E,G,E,C;Q,K,E,K;Q,U,E,I;Q,Y,E,I;Q,Q,E,I;I,C;S,G,C,G,I,K;I,M,C,G;A,C;S,oC,C,G,E,C,E,C;I,M,C,qC,C,G,K,2C,C,G,E,C,K,iD,C,G,E,C,K,sC;A,C;S,sC,G,C;I,K,C,G,C,S,C,C;A,C;S,iD,C,C,E,M,E,C;I,E,G,C,E,M;I,E,E,M,C,C,K,C,S,M,C,uC,C,C,E,M;I,G,C,C,G,M,C,S,C,Q,C,I,C,C,E,K,C,C,E,E;I,E,E,C,K,C,W,C,C,W,E,C,G,C,C,W,C,I;I,E,E,C,K,C,Q,C,K,C,M,M,C,K,C,I,C,C;I,E,E,C,K,C,yD,I,C,C,G,M,C,uC,C,C,E,M;A,C;S,uC,C,G,E,G,E,C;I,E,E,G,I,I,I,G,G,G,C,M,E,G,G,G,C,M;I,G,C,G,C,C,G,C,E,I,G,G,C,K,C,G,G,C,G,G,E,C,G,I,C,C,I,G,C,C;I,M,C,I;A,C;S,2C,C,G,E,C,E,C;I,G,C,E,G,G,I,I,G,I,G,M,C,M,K,C,c,G,C,M,C,Q,K,G,C,C;I,E,E,E,I,I,E,M;I,G,C,I,G,C,C;I,G,C,E,G,I;I,G,C,E,G,K;I,G,C,E,E,E;I,G,C,C;Q,G,C,E,G,E,C,I,C,G,K,E,I,E,G,E,C,I,I,I,G,E,G,I,C,C;Y,I,C,I,C,E,C,K;Y,E,E,C,I,I,C,M,K,C,E,K;Q,C;I,C,C,K,E,G,E,C;Q,E,G,I;Q,E,G,G;I,C,Q,C;Q,G,C,C;Y,E,G,E,I,E,C,C,Y,I,E,E,C,C;Q,C,Q,C;Y,E,E,E,E,K,C,E;Q,C;I,C;I,M,C,I;A,C;S,qC,C,G,E,C;I,E,E,K,C,O,C,G,G,M,C,G;A,C;AAEA,EAWA,AAXA;;;;;;;;;;;CAWA,AAXA,EAWA,CACO,GAAA,CAAME,oCAAc,GAAG,QAAA,CAAjBA,cAAiB,CAACxC,SAAD,EAAYC,SAAZ,EAA0B,CAAjD;IACL,GAAA,CAAMwC,QAAQ,OAAG,6BAAA,CAAA,CAAA,WAAUzC,SAAV;IAEjB7C,MAAM,CAACuF,OAAP,CAAezC,SAAf,EAA0Bd,OAA1B,CAAkC,QAAA,CAAA,IAAA,EAAY,CAA9ChC;QAA8C,GAAA,CAAA,KAAA,GAAA,oCAAA,CAAA,IAAA,EAAA,CAAA,GAAV0E,CAAU,GAAA,KAAA,CAAA,CAAA,GAAP/E,CAAO,GAAA,KAAA,CAAA,CAAA;QAC5C,EAAA,EAAI+E,CAAC,KAAK,CAAN,WAAkBA,CAAC,KAAK,CAA5B,QACEY,QAAQ,CAACZ,CAAD,IAAR,mCAAA,CAAA,mCAAA,CAAA,CAAA;QAAA,CAAA,EAAmBY,QAAQ,CAACZ,CAAD,IAAQ/E,CAAnC;aAEA2F,QAAQ,CAACZ,CAAD,IAAM/E,CAAd;IAEH,CAND;IAQA,MAAA,CAAO2F,QAAP;AACD,CAZM;A,yB,C,c,G,oC;;;S,4C,C,G,E,C;I,M,C,G,I,G,C,U,G,G,G,C;Q,C,U,G;I,C;A,C;S,wC,C,G,E,C;I,M,C,wC,C,G,K,sC,C,G,K,iD,C,G,K,wC;A,C;S,wC,G,C;I,K,C,G,C,S,C,C;A,C;S,iD,C,C,E,M,E,C;I,E,G,C,E,M;I,E,E,M,C,C,K,C,S,M,C,uC,C,C,E,M;I,G,C,C,G,M,C,S,C,Q,C,I,C,C,E,K,C,C,E,E;I,E,E,C,K,C,W,C,C,W,E,C,G,C,C,W,C,I;I,E,E,C,K,C,Q,C,K,C,M,M,C,K,C,I,C,C;I,E,E,C,K,C,yD,I,C,C,G,M,C,uC,C,C,E,M;A,C;S,sC,C,I,E,C;I,E,E,M,C,M,K,C,c,I,C,M,C,Q,K,I,I,I,C,C,gB,I,E,M,C,K,C,I,C,I;A,C;S,wC,C,G,E,C;I,E,E,K,C,O,C,G,G,M,C,uC,C,G;A,C;S,uC,C,G,E,G,E,C;I,E,E,G,I,I,I,G,G,G,C,M,E,G,G,G,C,M;I,G,C,G,C,C,G,C,E,I,G,G,C,K,C,G,G,C,G,G,E,C,G,I,C,C,I,G,C,C;I,M,C,I;A,C;S,qC,C,G,E,G,E,K,E,C;I,E,E,G,I,G,E,M,C,c,C,G,E,G,E,C;Q,K,E,K;Q,U,E,I;Q,Y,E,I;Q,Q,E,I;I,C;S,G,C,G,I,K;I,M,C,G;A,C;S,6B,C,I,E,C;I,M,C,6B,G,C,a,M,C,M,I,C,W,M,C,M,C,Q,G,Q,C,G,E,C;Q,M,C,M,C,G;I,C,G,Q,C,G,E,C;Q,M,C,G,I,C,a,M,C,M,I,G,C,W,K,M,I,G,K,M,C,S,G,C,U,M,C,G;I,C,E,6B,C,I;A,C;AFLP,EAKA,AALA;;;;;CAKA,AALA,EAKA,CACA,GAAA,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,GAAA,SAAA,CAAA,CAAA,IAAP,CAAA;IAAA,CAAO;IAC7E,GAAA,CAAI+E,aAAa,GAAGvH,IAAI,CAAC6C,KAAL,CAAW7C,IAAI,CAACC,SAAL,CAAekH,SAAf;IAC/B,GAAA,CAAIK,MAAM,GAAG,QAAA,CAAA,MAAA,CAAAjC,GAAG,EAAhB,CAAA;QAAgB,MAAA,CAAIA,GAAJ;IAAA,CAAhB;IAEA,MAAA,CAAQ8B,QAAR;QACE,IAAA,CAAK,CAAL;YACEG,MAAM,GAAG5B,mCAAa,CAAC0B,QAAD;YACtB,KAAA;QAEF,IAAA,CAAK,CAAL;YACEE,MAAM,GAAGnC,iCAAW,CAACiC,QAAD;YACpB,KAAA;QAEF,IAAA,CAAK,CAAL;YACEE,MAAM,GAAG9B,8BAAQ,CAAC4B,QAAD;YACjB,KAAA;QAEF,IAAA,CAAK,CAAL;YACEE,MAAM,GAAGhC,mCAAa,CAAC8B,QAAD;YACtB,KAAA;;YAGA,KAAA,CAAM,GAAA,CAAI7F,KAAJ,CAAA,CAAA,EAAA,MAAA,CAAa4F,QAAb,EAAA,CAAA;;IAIVE,aAAa,GAAGL,sCAAgB,CAACC,SAAD,EAAYK,MAAZ,EAAoBhF,OAApB;IAEhC,MAAA,CAAO+E,aAAP;AACD,CA7BD;A,yB,C,qB,G,2C;;;;A,C;A,M,C,c,C,yB,E,C,a,C;I,K,E,I;A,C;A,yB,C,qB,G,yB,C,mB,G,I,C,C;;ACvIA,GAAA,CAAA,iDAAA,GAAA,4CAAA,CAAA,iCAAA;;S,4C,C,G,E,C;I,M,C,G,I,G,C,U,G,G,G,C;Q,C,U,G;I,C;A,C;S,6B,C,M,E,c,E,C;I,G,C,I,G,M,C,I,C,M;I,E,E,M,C,qB,E,C;Q,G,C,O,G,M,C,qB,C,M;Q,c,K,O,G,O,C,M,C,Q,C,G,E,C;Y,M,C,M,C,wB,C,M,E,G,E,U;Q,C,I,I,C,I,C,K,C,I,E,O;I,C;I,M,C,I;A,C;S,mC,C,M,E,C;I,G,C,G,C,C,G,C,E,C,G,S,C,M,E,C,G,C;Q,G,C,M,G,I,I,S,C,C,I,S,C,C,I,C;Q,C;Q,C,G,C,G,6B,C,M,C,M,I,C,E,O,C,Q,C,G,E,C;Y,qC,C,M,E,G,E,M,C,G;Q,C,I,M,C,yB,G,M,C,gB,C,M,E,M,C,yB,C,M,K,6B,C,M,C,M,G,O,C,Q,C,G,E,C;Y,M,C,c,C,M,E,G,E,M,C,wB,C,M,E,G;Q,C;I,C;I,M,C,M;A,C;S,qC,C,G,E,G,E,K,E,C;I,E,E,G,I,G,E,M,C,c,C,G,E,G,E,C;Q,K,E,K;Q,U,E,I;Q,Y,E,I;Q,Q,E,I;I,C;S,G,C,G,I,K;I,M,C,G;A,C;S,oC,C,G,E,C,E,C;I,M,C,qC,C,G,K,2C,C,G,E,C,K,iD,C,G,E,C,K,sC;A,C;S,sC,G,C;I,K,C,G,C,S,C,C;A,C;S,iD,C,C,E,M,E,C;I,E,G,C,E,M;I,E,E,M,C,C,K,C,S,M,C,uC,C,C,E,M;I,G,C,C,G,M,C,S,C,Q,C,I,C,C,E,K,C,C,E,E;I,E,E,C,K,C,W,C,C,W,E,C,G,C,C,W,C,I;I,E,E,C,K,C,Q,C,K,C,M,M,C,K,C,I,C,C;I,E,E,C,K,C,yD,I,C,C,G,M,C,uC,C,C,E,M;A,C;S,uC,C,G,E,G,E,C;I,E,E,G,I,I,I,G,G,G,C,M,E,G,G,G,C,M;I,G,C,G,C,C,G,C,E,I,G,G,C,K,C,G,G,C,G,G,E,C,G,I,C,C,I,G,C,C;I,M,C,I;A,C;S,2C,C,G,E,C,E,C;I,G,C,E,G,G,I,I,G,I,G,M,C,M,K,C,c,G,C,M,C,Q,K,G,C,C;I,E,E,E,I,I,E,M;I,G,C,I,G,C,C;I,G,C,E,G,I;I,G,C,E,G,K;I,G,C,E,E,E;I,G,C,C;Q,G,C,E,G,E,C,I,C,G,K,E,I,E,G,E,C,I,I,I,G,E,G,I,C,C;Y,I,C,I,C,E,C,K;Y,E,E,C,I,I,C,M,K,C,E,K;Q,C;I,C,C,K,E,G,E,C;Q,E,G,I;Q,E,G,G;I,C,Q,C;Q,G,C,C;Y,E,G,E,I,E,C,C,Y,I,E,E,C,C;Q,C,Q,C;Y,E,E,E,E,K,C,E;Q,C;I,C;I,M,C,I;A,C;S,qC,C,G,E,C;I,E,E,K,C,O,C,G,G,M,C,G;A,C;AAGO,GAAA,CAAME,yCAAmB,GAAG,QAAA,CAAtBA,mBAAsB,CAACC,SAAD,EAAYC,QAAZ,EAAyB,CAArD;IACL,GAAA,CAAI9H,KAAK,GAAG6H,SAAZ;IACA,EAAA,GAAK7H,KAAL,EAAYA,KAAK,GAAGR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","sources":["src/index.js","src/lib/build-style.js","src/lib/primitive-utils.js","src/lib/merge-overrides.js","src/lib/merge-variables.js","src/lib/modify-number-variables.js","src/lib/create-template.js"],"sourcesContent":["import { buildStyle } from './lib/build-style';\nimport { mergeOverrides } from './lib/merge-overrides';\nimport { mergeVariables } from './lib/merge-variables';\nimport { modifyNumberVariables } from './lib/modify-number-variables';\nimport {\n  createLayerTemplate,\n  createVariantTemplate\n} from './lib/create-template';\n\nexport {\n  mergeOverrides,\n  buildStyle,\n  mergeVariables,\n  modifyNumberVariables,\n  createLayerTemplate,\n  createVariantTemplate\n};\n","#!/usr/bin/env node\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport cloneDeep from 'lodash.clonedeep';\nimport isPlainObject from 'lodash.isplainobject';\nimport { removeEmpty, deleteProp } from './primitive-utils';\nimport { mergeOverrides } from './merge-overrides';\n\n/**\n * Check if a file exists\n *\n * @param {string} path - the file path\n * @return {boolean} whether the file exists\n */\nconst fileExists = path => {\n  try {\n    fs.accessSync(path, fs.constants.R_OK);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Determine whether a value is or contains undefined within it\n *\n * @param {*} v - the value to check\n * @returns {boolean|array}\n */\nconst findUndefined = v => {\n  if (v == undefined) return true;\n\n  // For objects and arrays, we want to know the keys/indices\n  // that contain undefined values\n  if (typeof v === 'object' || Array.isArray(v)) {\n    const undefinedValues = Object.keys(v)\n      .map(key => {\n        const undefinedProps = findUndefined(v[key]);\n        if (!undefinedProps) return null;\n\n        // This is the leaf node, just return the key\n        if (typeof undefinedProps === 'boolean') return key;\n\n        // Undefined properties are deeper, include key and further branches\n        return { [key]: undefinedProps };\n      })\n      .filter(v => !!v);\n\n    return undefinedValues.length ? undefinedValues : false;\n  }\n\n  return false;\n};\n\n/**\n * Check built layer for validity\n *\n * @param {object} layer - the layer to check\n * @returns {array} an array of validation messages\n */\nconst validateLayer = layer => {\n  let messages = [];\n\n  const undefinedProps = findUndefined(layer);\n  if (undefinedProps?.length) {\n    messages = [\n      ...messages,\n      ...undefinedProps.map(undefinedProp => {\n        return `Undefined property at ${JSON.stringify(undefinedProp)}`;\n      })\n    ];\n  }\n\n  return messages;\n};\n\n/**\n * Get a useful error message when something goes wrong while building a layer\n *\n * Avoid stack traces, try to find error description and line in the layer file.\n *\n * @param {Error} error - the error object thrown\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {string}\n */\nconst getLayerBuildErrorMessage = (error, name, path) => {\n  const { stack } = error;\n\n  // Get first \"at\" line of stack trace, split : to get line number\n  const lineNumber = stack.split('\\n')[1].split(':')[1];\n\n  // Load file and get the line at the given lineNumber\n  const layerFile = fs.readFileSync(path, 'utf8');\n  const layerLine = layerFile.split('\\n')[lineNumber - 1];\n\n  return `${chalk.red.bold('Error:')} Couldn't build layer ${chalk.blue(name)}.\n\nDetails: ${error.message} in\n  ${chalk.blue(path)}\n\n${lineNumber}: ${layerLine}`;\n};\n\n/**\n * Nicely format a file does not exist error message\n *\n * @param {string} fileType - 'layer' or 'style'\n * @param {string} name - the name of the file being loaded\n * @param {string} path - the file path being loaded\n * @returns {string}\n */\nconst getFileDoesNotExistMessage = (fileType, name, path) => {\n  return `\\n${chalk.red.bold('Error:')} Couldn't load ${fileType} ${chalk.blue(\n    name\n  )}, does it exist? Attempted to load from\n  ${chalk.blue(path)}\n`;\n};\n\n/**\n * Nicely format a file error message\n *\n * @param {string} fileType - 'layer' or 'style'\n * @param {string} name - the name of the file being loaded\n * @param {string} path - the file path being loaded\n * @param {string} error - the error message\n * @returns {string}\n */\nconst getFileErrorMessage = (fileType, name, path, error) => {\n  return `\\n${chalk.red.bold('Error:')} Couldn't load ${fileType} ${chalk.blue(\n    name\n  )}. Received this error:\n\n${chalk.red(error.stack)}\n`;\n};\n\n/**\n * Nicely format and log validation messages for style layers\n *\n * @param {object} validationMessages - the validation messages, keyed by layer name\n * @returns {Void}\n */\nconst logLayerValidationMessages = validationMessages => {\n  Object.keys(validationMessages).forEach(layer => {\n    console.warn(`  Layer ${chalk.blue(layer)}:`);\n    validationMessages[layer].forEach(message => {\n      console.warn(`    ${message}`);\n    });\n  });\n\n  console.warn('');\n};\n\n/**\n * Load the function that will build the layer.\n *\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {function} the layer builder\n */\nconst loadLayerBuilder = (name, path) => {\n  if (!fileExists(path)) {\n    throw new Error(getFileDoesNotExistMessage('layer', name, path));\n  }\n\n  try {\n    return require(path).default;\n  } catch (error) {\n    throw new Error(getFileErrorMessage('layer', name, path, error));\n  }\n};\n\n/**\n * Load a style, wrapped here to catch and format errors.\n *\n * @param {string} path - the file path to the style\n * @param {string} name - the style name\n * @returns {object}\n */\nconst loadStyle = (name, path) => {\n  if (!fileExists(path)) {\n    throw new Error(getFileDoesNotExistMessage('style', name, path));\n  }\n\n  try {\n    return require(path);\n  } catch (error) {\n    throw new Error(getFileErrorMessage('style', name, path, error));\n  }\n};\n\n/**\n * Build a layer\n *\n * @param {object} context - the context, which contains variables for the layer\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {object}\n */\nconst buildLayer = (context, name, path) => {\n  const builder = loadLayerBuilder(name, path);\n\n  let layer;\n  let contextMatches;\n  try {\n    layer = builder(context);\n    const fileStr = fs.readFileSync(path, 'utf8');\n    contextMatches = fileStr.match(/context(?:\\.\\w+)+/g) ?? [];\n  } catch (error) {\n    throw new Error(getLayerBuildErrorMessage(error, name, path));\n  }\n\n  return {\n    layer: mergeOverrides(layer.baseStyle, layer.overrides),\n    usedContext: contextMatches\n  };\n};\n\n/**\n * Build style\n *\n * @param {string} name - the name of the style being built\n * @param {string} absoluteStylePath - the input directory that contains styles\n * @param {string} layerDir - the input directory that contains layers\n * @returns {Object}\n */\nexport const buildStyle = (name, absoluteStylePath, layerDir, options = {}) => {\n  if (!absoluteStylePath) {\n    throw new Error('Must provide absoluteStylePath.');\n  }\n  if (!layerDir) {\n    throw new Error('Must provide layerDir.');\n  }\n\n  const verbose = options?.verbose ?? false;\n\n  const { context, template } = loadStyle(\n    name,\n    path.resolve(absoluteStylePath)\n  );\n\n  const styleJson = JSON.parse(JSON.stringify(template));\n\n  let validationMessages = {};\n\n  if (verbose) {\n    console.log(`Building style ${chalk.blue(name)}`);\n  }\n\n  let unusedContext = cloneDeep(context);\n  let usedContextPaths = [];\n\n  styleJson.layers = template.layers.map(layerName => {\n    if (verbose) {\n      console.log(`  Adding layer ${chalk.blue(layerName)}`);\n    }\n\n    const layerPath = path.resolve(layerDir, `${layerName}.js`);\n    const { layer, usedContext } = buildLayer(context, layerName, layerPath);\n\n    // Create path strings of used context\n    usedContextPaths = usedContextPaths.concat(\n      cloneDeep(usedContext).map(str => str.split('.').slice(1).join('.'))\n    );\n\n    // Use used context to filter context down to what is not used\n    usedContext\n      .map(str => str.split('.').slice(1))\n      .forEach(contextPath => {\n        unusedContext = deleteProp(unusedContext, contextPath);\n      });\n\n    // Collect validation messages for each layer\n    const layerValidationMessages = validateLayer(layer);\n    if (layerValidationMessages.length) {\n      validationMessages[layerName] = layerValidationMessages;\n    }\n\n    return layer;\n  });\n\n  unusedContext = removeEmpty(unusedContext);\n\n  if (Object.keys(validationMessages).length > 0) {\n    console.warn(`Found issues in style ${chalk.blue(name)}:`);\n    logLayerValidationMessages(validationMessages);\n  }\n\n  // Flattens nested object to be one level with keys using periods to represent nesting\n  const flattenObject = (obj, prefix = '') =>\n    Object.keys(obj).reduce((acc, k) => {\n      const pre = prefix.length ? prefix + '.' : '';\n      if (isPlainObject(obj[k]))\n        Object.assign(acc, flattenObject(obj[k], pre + k));\n      else acc[pre + k] = obj[k];\n      return acc;\n    }, {});\n\n  const unusedContextPaths = Object.keys(flattenObject(unusedContext));\n\n  return { styleJson, unusedContextPaths, usedContextPaths };\n};\n","// Helper functions for unused context\nimport isPlainObject from 'lodash.isplainobject';\nimport isEmpty from 'lodash.isempty';\n\nexport const deleteProp = (object, path) => {\n  var last = path.pop();\n  let next = JSON.parse(JSON.stringify(object));\n  delete path.reduce((o, k) => o[k] || {}, next)[last];\n  return next;\n};\n\nexport const removeEmpty = o => {\n  for (var k in o) {\n    if (!o[k] || !isPlainObject(o[k])) {\n      continue;\n    }\n    removeEmpty(o[k]);\n    if (isEmpty(o[k])) {\n      delete o[k];\n    }\n  }\n  return o;\n};\n","import cloneDeep from 'lodash.clonedeep';\n\n/**\n * Merge overrides with a baseStyle or other overrides\n *\n * paint and layout overrides do not fully overwrite paint and layout values in\n * the baseStyle, however, they add or replaces specific properties. In this\n * way, an overrides object can specify a single paint property to modify or add\n * without overwriting all of the paint properties of the baseStyle.\n *\n * @param {object} baseStyle\n * @param {object} overrides\n * @returns {object}\n */\nexport const mergeOverrides = (baseStyle, overrides) => {\n  const extended = cloneDeep(baseStyle);\n\n  Object.entries(overrides).forEach(([k, v]) => {\n    if (k === 'layout' || k === 'paint') {\n      extended[k] = { ...extended[k], ...v };\n    } else {\n      extended[k] = v;\n    }\n  });\n\n  return extended;\n};\n","const isObject = v => typeof v === 'object' && !Array.isArray(v) && !!v;\n\n/**\n * Merge the current object of variables with an extender object. Variables\n * defined in extender will override variables defined in the current variables,\n * if there is overlap. Nested variables are taken into account.\n * @param {Object} current - the original variable object\n * @param {Object} extender - the extender variable object, containing overrides\n * @returns {Object} - the merged variables\n */\nconst merge = (current, extender) => {\n  const merged = JSON.parse(JSON.stringify(current));\n\n  Object.keys(extender).forEach(k => {\n    // Handle nested variables\n    if (isObject(current[k]) && isObject(extender[k])) {\n      merged[k] = merge(current[k], extender[k]);\n    }\n    else {\n      merged[k] = JSON.parse(JSON.stringify(extender[k]));\n    }\n  });\n\n  return merged;\n};\n\n\n/**\n * Merge any number of variable objects\n * @param {...Object} variableGroups - one or many variable objects, each \n * passed as a separate parameter\n * @returns {Object} the merged variable object\n */\nexport const mergeVariables = (...variableGroups) => {\n  return variableGroups.reduce((acc, cur) => merge(acc, cur), {});\n};\n","/**\n * Returns a new function that divides a number by the modifier passed here\n * @param {number} divisor - number to divide by in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getDivideFn = divisor => {\n  return num => num / divisor;\n};\n/**\n * Returns a new function that subtracts from a number by the modifier passed here\n * @param {number} toSubtract - number to subtract in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getSubtractFn = toSubtract => {\n  return num => num - toSubtract;\n};\n/**\n * Returns a new function that adds to a number by the modifier passed here\n * @param {number} toAdd - number to add in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getAddFn = toAdd => {\n  return num => num + toAdd;\n};\n/**\n * Returns a new function that multiplies a number by the modifier passed here\n * @param {number} multiplier - number to multiply by in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getMultiplyFn = multiplier => {\n  return num => num * multiplier;\n};\n\n/**\n * Modifies the property value after the transform function using options\n * @param {Array|number} value - property value of the variable\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Array|number} - the modified property values from the options\n */\nconst handleOptions = (value, options) => {\n  const { round, floor, ceil, toFixed } = options;\n  if (round) return Math.round(value);\n  if (floor) return Math.floor(value);\n  if (ceil) return Math.ceil(value);\n  if (toFixed !== undefined) return Number(value.toFixed(toFixed));\n  return value;\n};\n\n/**\n * Modifies the property value of the variable with the transform function\n * @param {Array|number} propertyValue - property value of the variable\n * @param {Function} fn - function to run the value or expression output values through\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Array|number} - the modified property values\n */\nconst modifyValue = (propertyValue, fn, options) => {\n  if (typeof propertyValue === 'number') {\n    return handleOptions(fn(propertyValue), options);\n  }\n  if (!Array.isArray(propertyValue)) return propertyValue;\n\n  const expressionType = propertyValue[0];\n  let sliceIndex;\n  let outputCondition;\n  let fallback;\n\n  switch (expressionType) {\n    case 'interpolate':\n    case 'interpolate-hcl':\n    case 'interpolate-lab': {\n      sliceIndex = 3;\n      outputCondition = i => i % 2 !== 0;\n      break;\n    }\n    case 'step': {\n      sliceIndex = 2;\n      outputCondition = i => i % 2 === 0;\n      break;\n    }\n    case 'case': {\n      sliceIndex = 1;\n      outputCondition = i => i % 2 !== 0;\n      fallback = propertyValue.pop();\n      break;\n    }\n    case 'match': {\n      sliceIndex = 2;\n      outputCondition = i => i % 2 !== 0;\n      fallback = propertyValue.pop();\n      break;\n    }\n  }\n\n  // Rebuild modified expression\n  const nextValue = propertyValue.slice(0, sliceIndex);\n  const inputOutputs = propertyValue.slice(sliceIndex);\n  inputOutputs.forEach((val, i) => {\n    if (outputCondition(i)) {\n      nextValue.push(modifyValue(val, fn, options));\n    } else {\n      nextValue.push(val);\n    }\n  });\n  if (fallback !== undefined) {\n    nextValue.push(modifyValue(fallback, fn, options));\n  }\n\n  return nextValue;\n};\n\n/**\n * Recurses the variables object to find the actual property values\n * @param {Object|Array|number} variables - the original variable object or variable\n * @param {Function} fn - function to run the value or expression output values through\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Object} - the modified variables\n */\nconst replaceVariables = (variables, fn, options) => {\n  if (typeof variables !== 'object' || Array.isArray(variables)) {\n    return modifyValue(variables, fn, options);\n  }\n  return Object.keys(variables).reduce((acc, key) => {\n    acc[key] = replaceVariables(variables[key], fn, options);\n    return acc;\n  }, {});\n};\n\n/**\n * Modify number values in variables using a math operation\n * @param {Object|Array|number} variables - the original variable object or variable\n * @param {string} operator - Math operation, one of - '*', '/', '+', '-'\n * @param {number} modifier - number argument to modify value by\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Object} - the modified variables\n */\nconst modifyNumberVariables = (variables, operator, modifier, options = {}) => {\n  let nextVariables = JSON.parse(JSON.stringify(variables));\n  let mathFn = num => num;\n\n  switch (operator) {\n    case '*': {\n      mathFn = getMultiplyFn(modifier);\n      break;\n    }\n    case '/': {\n      mathFn = getDivideFn(modifier);\n      break;\n    }\n    case '+': {\n      mathFn = getAddFn(modifier);\n      break;\n    }\n    case '-': {\n      mathFn = getSubtractFn(modifier);\n      break;\n    }\n    default: {\n      throw new Error(`${operator} is not a valid operator.`);\n    }\n  }\n\n  nextVariables = replaceVariables(variables, mathFn, options);\n\n  return nextVariables;\n};\n\nexport { modifyNumberVariables };\n","import stringifyPretty from 'json-stringify-pretty-compact';\nimport { latest } from '@mapbox/mapbox-gl-style-spec';\n\nexport const createLayerTemplate = (baseLayer, variants) => {\n  let layer = baseLayer;\n  if (!layer) layer = Object.values(variants)[0];\n\n  let baseStyle = stringifyPretty(layer, { indent: 2 })\n    .split('\\n')\n    .join('\\n  ');\n\n  let allOverrides = '';\n\n  // TODO currently making the primary differentiator style id until we sort differences\n  for (const styleName in variants) {\n    let overrides = {};\n\n    if (layer && Object.keys(variants).length) {\n      let variantLayer = variants[styleName];\n\n      Object.entries(variantLayer).forEach(([k, v]) => {\n        if (k === 'layout' || k === 'paint') return;\n        if (JSON.stringify(v) === JSON.stringify(layer[k])) return;\n        overrides[k] = v;\n      });\n\n      if (variantLayer.layout) {\n        // If a property does not exist on a variant, override with the default\n        const defaultLayout = Object.keys(layer.layout || {}).reduce(\n          (acc, k) => {\n            acc[k] = latest[`layout_${layer.type}`][k].default;\n            return acc;\n          },\n          {}\n        );\n\n        const fullLayout = { ...defaultLayout, ...variantLayer.layout };\n\n        Object.entries(fullLayout).forEach(([k, v]) => {\n          if (JSON.stringify(v) === JSON.stringify(layer?.layout?.[k])) return;\n          if (!overrides.layout) overrides.layout = {};\n          overrides.layout[k] = v;\n        });\n      }\n\n      if (variantLayer.paint) {\n        // If a property does not exist on a variant, override with the default\n        const defaultPaint = Object.keys(layer.paint || {}).reduce((acc, k) => {\n          acc[k] = latest[`paint_${layer.type}`][k].default;\n          return acc;\n        }, {});\n\n        const fullPaint = { ...defaultPaint, ...variantLayer.paint };\n\n        Object.entries(fullPaint).forEach(([k, v]) => {\n          if (JSON.stringify(v) === JSON.stringify(layer?.paint?.[k])) return;\n          if (!overrides.paint) overrides.paint = {};\n          overrides.paint[k] = v;\n        });\n      }\n    }\n    overrides = stringifyPretty(overrides, { indent: 2 })\n      .split('\\n')\n      .join('\\n    ');\n\n    allOverrides += `${\n      !!allOverrides ? ' else if' : 'if'\n    } (context.styleName === '${styleName}') {\n      overrides = ${overrides};\n  }`;\n  }\n\n  const fileContent = `module.exports.default = (context) => {\n  const baseStyle = ${baseStyle};\n  let overrides = {};\n  ${allOverrides}\n  return {\n    baseStyle,\n    overrides\n  };\n};`;\n\n  return fileContent;\n};\n\nexport const createVariantTemplate = style => {\n  const templateStyle = {\n    ...style,\n    layers: style.layers.map(l => l.id)\n  };\n\n  const fileContent = `module.exports.context = {\n  colors: {\n  },\n  styleName: '${style.name}'\n};\n\nmodule.exports.template = ${JSON.stringify(templateStyle, null, 2)};\n`;\n\n  return fileContent;\n};\n"],"names":["fileExists","path","fs","accessSync","constants","R_OK","e","findUndefined","v","undefined","Array","isArray","undefinedValues","Object","keys","map","key","undefinedProps","filter","length","validateLayer","layer","messages","undefinedProp","JSON","stringify","getLayerBuildErrorMessage","error","name","stack","lineNumber","split","layerFile","readFileSync","layerLine","chalk","red","bold","blue","message","getFileDoesNotExistMessage","fileType","getFileErrorMessage","logLayerValidationMessages","validationMessages","forEach","console","warn","loadLayerBuilder","Error","require","loadStyle","buildLayer","context","builder","contextMatches","fileStr","match","baseStyle","overrides","usedContext","buildStyle","absoluteStylePath","layerDir","options","verbose","resolve","template","styleJson","parse","log","unusedContext","usedContextPaths","layers","layerName","layerPath","concat","str","slice","join","contextPath","layerValidationMessages","flattenObject","obj","prefix","reduce","acc","k","pre","assign","unusedContextPaths","deleteProp","object","last","pop","next","o","removeEmpty","mergeOverrides","extended","entries","isObject","merge","current","extender","merged","mergeVariables","variableGroups","cur","getDivideFn","divisor","num","getSubtractFn","toSubtract","getAddFn","toAdd","getMultiplyFn","multiplier","handleOptions","value","round","floor","ceil","toFixed","Math","Number","modifyValue","propertyValue","fn","expressionType","sliceIndex","outputCondition","fallback","i","nextValue","inputOutputs","val","push","replaceVariables","variables","modifyNumberVariables","operator","modifier","nextVariables","mathFn","createLayerTemplate","baseLayer","variants","values","indent","allOverrides","styleName","variantLayer","layout","defaultLayout","latest","type","fullLayout","paint","defaultPaint","fullPaint","fileContent","createVariantTemplate","style","templateStyle","l","id"],"version":3,"file":"module.js.map"}