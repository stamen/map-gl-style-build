{"mappings":";;;;;;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,M,C,c,C,c,E,Y,E;I,U,E,I;I,G,E,S,G,G;Q,O,oC,C;K;C,C,C;A,M,C,c,C,c,E,qB,E;I,U,E,I;I,G,E,S,G,G;Q,O,6C,C;K;C,C,C;A,M,C,c,C,c,E,uB,E;I,U,E,I;I,G,E,S,G,G;Q,O,+C,C;K;C,C,C;A,M,C,c,C,c,E,gB,E;I,U,E,I;I,G,E,S,G,G;Q,O,wC,C;K;C,C,C;A,M,C,c,C,c,E,gB,E;I,U,E,I;I,G,E,S,G,G;Q,O,wC,C;K;C,C,C;A,M,C,c,C,c,E,uB,E;I,U,E,I;I,G,E,S,G,G;Q,O,+C,C;K;C,C,C;;ACAmB,YAAA,CAAA;AAAAM,MAAA,CAAAC,cAAA,CAAAC,yBAAA,EAAAF,YAAAA,EAAAA;IAAAG,KAAA,EAAAA,IAAAA;CAAA,CAAA,CAAA;AAAAD,yBAAA,CAAAE,UAAA,GAAAF,KAAAA,CAAAA,CAAAA;;AACnB,IAAAG,yBAAA,GAAAC,4CAAA,CAAAX,SAAA,CAAA,AAAA;;AACA,IAAAY,2BAAA,GAAAD,4CAAA,CAAAX,WAAA,CAAA,AAAA;;AACA,IAAAa,4BAAA,GAAAF,4CAAA,CAAAX,YAAA,CAAA,AAAA;;AACA,IAAAc,6BAAA,GAAAH,4CAAA,CAAAX,sBAAA,CAAA,AAAA;;AACA,IAAAe,8BAAA,GAAAJ,4CAAA,CAAAX,0BAAA,CAAA,AAAA;;A,Y,C;A,M,C,c,C,yB,E,Y,E;I,K,E,I;C,C,C;A,yB,C,W,G,yB,C,U,G,K,C,C;;ACJA,IAAAc,6BAAA,GAAAH,4CAAA,CAAAX,0BAAA,CAAA,AAAA;;AACA,IAAAe,8BAAA,GAAAJ,4CAAA,CAAAX,oBAAA,CAAA,AAAA;AAAqC,SAAAW,4CAAAA,CAAAM,GAAA,EAAA;IAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,GAAA;QAAA,SAAA,EAAAA,GAAA;KAAA,CAAA;CAAA;AAFrC,sCAAA;AAIO,IAAM6H,gCAAU,GAAG,SAAbA,UAAUA,CAAIY,MAAM,EAAEzF,IAAI,EAAK;IAC1C,IAAI0F,IAAI,GAAG1F,IAAI,CAAC2F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","sources":["src/index.js","src/lib/build-style.js","src/lib/primitive-utils.js","src/lib/merge-overrides.js","src/lib/merge-variables.js","src/lib/modify-number-variables.js","src/lib/create-template.js"],"sourcesContent":["import { buildStyle } from './lib/build-style';\nimport { mergeOverrides } from './lib/merge-overrides';\nimport { mergeVariables } from './lib/merge-variables';\nimport { modifyNumberVariables } from './lib/modify-number-variables';\nimport {\n  createLayerTemplate,\n  createVariantTemplate\n} from './lib/create-template';\n\nexport {\n  mergeOverrides,\n  buildStyle,\n  mergeVariables,\n  modifyNumberVariables,\n  createLayerTemplate,\n  createVariantTemplate\n};\n","#!/usr/bin/env node\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport cloneDeep from 'lodash.clonedeep';\nimport isPlainObject from 'lodash.isplainobject';\nimport { removeEmpty, deleteProp } from './primitive-utils';\nimport { mergeOverrides } from './merge-overrides';\n\n/**\n * Check if a file exists\n *\n * @param {string} path - the file path\n * @return {boolean} whether the file exists\n */\nconst fileExists = path => {\n  try {\n    fs.accessSync(path, fs.constants.R_OK);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Determine whether a value is or contains undefined within it\n *\n * @param {*} v - the value to check\n * @returns {boolean|array}\n */\nconst findUndefined = v => {\n  if (v == undefined) return true;\n\n  // For objects and arrays, we want to know the keys/indices\n  // that contain undefined values\n  if (typeof v === 'object' || Array.isArray(v)) {\n    const undefinedValues = Object.keys(v)\n      .map(key => {\n        const undefinedProps = findUndefined(v[key]);\n        if (!undefinedProps) return null;\n\n        // This is the leaf node, just return the key\n        if (typeof undefinedProps === 'boolean') return key;\n\n        // Undefined properties are deeper, include key and further branches\n        return { [key]: undefinedProps };\n      })\n      .filter(v => !!v);\n\n    return undefinedValues.length ? undefinedValues : false;\n  }\n\n  return false;\n};\n\n/**\n * Check built layer for validity\n *\n * @param {object} layer - the layer to check\n * @returns {array} an array of validation messages\n */\nconst validateLayer = layer => {\n  let messages = [];\n\n  const undefinedProps = findUndefined(layer);\n  if (undefinedProps?.length) {\n    messages = [\n      ...messages,\n      ...undefinedProps.map(undefinedProp => {\n        return `Undefined property at ${JSON.stringify(undefinedProp)}`;\n      })\n    ];\n  }\n\n  return messages;\n};\n\n/**\n * Get a useful error message when something goes wrong while building a layer\n *\n * Avoid stack traces, try to find error description and line in the layer file.\n *\n * @param {Error} error - the error object thrown\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {string}\n */\nconst getLayerBuildErrorMessage = (error, name, path) => {\n  const { stack } = error;\n\n  // Get first \"at\" line of stack trace, split : to get line number\n  const lineNumber = stack.split('\\n')[1].split(':')[1];\n\n  // Load file and get the line at the given lineNumber\n  const layerFile = fs.readFileSync(path, 'utf8');\n  const layerLine = layerFile.split('\\n')[lineNumber - 1];\n\n  return `${chalk.red.bold('Error:')} Couldn't build layer ${chalk.blue(name)}.\n\nDetails: ${error.message} in\n  ${chalk.blue(path)}\n\n${lineNumber}: ${layerLine}`;\n};\n\n/**\n * Nicely format a file does not exist error message\n *\n * @param {string} fileType - 'layer' or 'style'\n * @param {string} name - the name of the file being loaded\n * @param {string} path - the file path being loaded\n * @returns {string}\n */\nconst getFileDoesNotExistMessage = (fileType, name, path) => {\n  return `\\n${chalk.red.bold('Error:')} Couldn't load ${fileType} ${chalk.blue(\n    name\n  )}, does it exist? Attempted to load from\n  ${chalk.blue(path)}\n`;\n};\n\n/**\n * Nicely format a file error message\n *\n * @param {string} fileType - 'layer' or 'style'\n * @param {string} name - the name of the file being loaded\n * @param {string} path - the file path being loaded\n * @param {string} error - the error message\n * @returns {string}\n */\nconst getFileErrorMessage = (fileType, name, path, error) => {\n  return `\\n${chalk.red.bold('Error:')} Couldn't load ${fileType} ${chalk.blue(\n    name\n  )}. Received this error:\n\n${chalk.red(error.stack)}\n`;\n};\n\n/**\n * Nicely format and log validation messages for style layers\n *\n * @param {object} validationMessages - the validation messages, keyed by layer name\n * @returns {Void}\n */\nconst logLayerValidationMessages = validationMessages => {\n  Object.keys(validationMessages).forEach(layer => {\n    console.warn(`  Layer ${chalk.blue(layer)}:`);\n    validationMessages[layer].forEach(message => {\n      console.warn(`    ${message}`);\n    });\n  });\n\n  console.warn('');\n};\n\n/**\n * Load the function that will build the layer.\n *\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {function} the layer builder\n */\nconst loadLayerBuilder = (name, path) => {\n  if (!fileExists(path)) {\n    throw new Error(getFileDoesNotExistMessage('layer', name, path));\n  }\n\n  try {\n    return require(path).default;\n  } catch (error) {\n    throw new Error(getFileErrorMessage('layer', name, path, error));\n  }\n};\n\n/**\n * Load a style, wrapped here to catch and format errors.\n *\n * @param {string} path - the file path to the style\n * @param {string} name - the style name\n * @returns {object}\n */\nconst loadStyle = (name, path) => {\n  if (!fileExists(path)) {\n    throw new Error(getFileDoesNotExistMessage('style', name, path));\n  }\n\n  try {\n    return require(path);\n  } catch (error) {\n    throw new Error(getFileErrorMessage('style', name, path, error));\n  }\n};\n\n/**\n * Build a layer\n *\n * @param {object} context - the context, which contains variables for the layer\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {object}\n */\nconst buildLayer = (context, name, path) => {\n  const builder = loadLayerBuilder(name, path);\n\n  let layer;\n  let contextMatches;\n  try {\n    layer = builder(context);\n    const fileStr = fs.readFileSync(path, 'utf8');\n    contextMatches = fileStr.match(/context(?:\\.\\w+)+/g) ?? [];\n  } catch (error) {\n    throw new Error(getLayerBuildErrorMessage(error, name, path));\n  }\n\n  return {\n    layer: mergeOverrides(layer.baseStyle, layer.overrides),\n    usedContext: contextMatches\n  };\n};\n\n/**\n * Build style\n *\n * @param {string} name - the name of the style being built\n * @param {string} absoluteStylePath - the input directory that contains styles\n * @param {string} layerDir - the input directory that contains layers\n * @returns {Object}\n */\nexport const buildStyle = (name, absoluteStylePath, layerDir, options = {}) => {\n  if (!absoluteStylePath) {\n    throw new Error('Must provide absoluteStylePath.');\n  }\n  if (!layerDir) {\n    throw new Error('Must provide layerDir.');\n  }\n\n  const verbose = options?.verbose ?? false;\n\n  const { context, template } = loadStyle(\n    name,\n    path.resolve(absoluteStylePath)\n  );\n\n  const styleJson = JSON.parse(JSON.stringify(template));\n\n  let validationMessages = {};\n\n  if (verbose) {\n    console.log(`Building style ${chalk.blue(name)}`);\n  }\n\n  let unusedContext = cloneDeep(context);\n  let usedContextPaths = [];\n\n  styleJson.layers = template.layers.map(layerName => {\n    if (verbose) {\n      console.log(`  Adding layer ${chalk.blue(layerName)}`);\n    }\n\n    const layerPath = path.resolve(layerDir, `${layerName}.js`);\n    const { layer, usedContext } = buildLayer(context, layerName, layerPath);\n\n    // Create path strings of used context\n    usedContextPaths = usedContextPaths.concat(\n      cloneDeep(usedContext).map(str => str.split('.').slice(1).join('.'))\n    );\n\n    // Use used context to filter context down to what is not used\n    usedContext\n      .map(str => str.split('.').slice(1))\n      .forEach(contextPath => {\n        unusedContext = deleteProp(unusedContext, contextPath);\n      });\n\n    // Collect validation messages for each layer\n    const layerValidationMessages = validateLayer(layer);\n    if (layerValidationMessages.length) {\n      validationMessages[layerName] = layerValidationMessages;\n    }\n\n    return layer;\n  });\n\n  unusedContext = removeEmpty(unusedContext);\n\n  if (Object.keys(validationMessages).length > 0) {\n    console.warn(`Found issues in style ${chalk.blue(name)}:`);\n    logLayerValidationMessages(validationMessages);\n  }\n\n  // Flattens nested object to be one level with keys using periods to represent nesting\n  const flattenObject = (obj, prefix = '') =>\n    Object.keys(obj).reduce((acc, k) => {\n      const pre = prefix.length ? prefix + '.' : '';\n      if (isPlainObject(obj[k]))\n        Object.assign(acc, flattenObject(obj[k], pre + k));\n      else acc[pre + k] = obj[k];\n      return acc;\n    }, {});\n\n  const unusedContextPaths = Object.keys(flattenObject(unusedContext));\n\n  return { styleJson, unusedContextPaths, usedContextPaths };\n};\n","// Helper functions for unused context\nimport isPlainObject from 'lodash.isplainobject';\nimport isEmpty from 'lodash.isempty';\n\nexport const deleteProp = (object, path) => {\n  var last = path.pop();\n  let next = JSON.parse(JSON.stringify(object));\n  delete path.reduce((o, k) => o[k] || {}, next)[last];\n  return next;\n};\n\nexport const removeEmpty = o => {\n  for (var k in o) {\n    if (!o[k] || !isPlainObject(o[k])) {\n      continue;\n    }\n    removeEmpty(o[k]);\n    if (isEmpty(o[k])) {\n      delete o[k];\n    }\n  }\n  return o;\n};\n","import cloneDeep from 'lodash.clonedeep';\n\n/**\n * Merge overrides with a baseStyle or other overrides\n *\n * paint and layout overrides do not fully overwrite paint and layout values in\n * the baseStyle, however, they add or replaces specific properties. In this\n * way, an overrides object can specify a single paint property to modify or add\n * without overwriting all of the paint properties of the baseStyle.\n *\n * @param {object} baseStyle\n * @param {object} overrides\n * @returns {object}\n */\nexport const mergeOverrides = (baseStyle, overrides) => {\n  const extended = cloneDeep(baseStyle);\n\n  Object.entries(overrides).forEach(([k, v]) => {\n    if (k === 'layout' || k === 'paint') {\n      extended[k] = { ...extended[k], ...v };\n    } else {\n      extended[k] = v;\n    }\n  });\n\n  return extended;\n};\n","const isObject = v => typeof v === 'object' && !Array.isArray(v) && !!v;\n\n/**\n * Merge the current object of variables with an extender object. Variables\n * defined in extender will override variables defined in the current variables,\n * if there is overlap. Nested variables are taken into account.\n * @param {Object} current - the original variable object\n * @param {Object} extender - the extender variable object, containing overrides\n * @returns {Object} - the merged variables\n */\nconst merge = (current, extender) => {\n  const merged = JSON.parse(JSON.stringify(current));\n\n  Object.keys(extender).forEach(k => {\n    // Handle nested variables\n    if (isObject(current[k]) && isObject(extender[k])) {\n      merged[k] = merge(current[k], extender[k]);\n    }\n    else {\n      merged[k] = JSON.parse(JSON.stringify(extender[k]));\n    }\n  });\n\n  return merged;\n};\n\n\n/**\n * Merge any number of variable objects\n * @param {...Object} variableGroups - one or many variable objects, each \n * passed as a separate parameter\n * @returns {Object} the merged variable object\n */\nexport const mergeVariables = (...variableGroups) => {\n  return variableGroups.reduce((acc, cur) => merge(acc, cur), {});\n};\n","/**\n * Returns a new function that divides a number by the modifier passed here\n * @param {number} divisor - number to divide by in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getDivideFn = divisor => {\n  return num => num / divisor;\n};\n/**\n * Returns a new function that subtracts from a number by the modifier passed here\n * @param {number} toSubtract - number to subtract in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getSubtractFn = toSubtract => {\n  return num => num - toSubtract;\n};\n/**\n * Returns a new function that adds to a number by the modifier passed here\n * @param {number} toAdd - number to add in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getAddFn = toAdd => {\n  return num => num + toAdd;\n};\n/**\n * Returns a new function that multiplies a number by the modifier passed here\n * @param {number} multiplier - number to multiply by in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getMultiplyFn = multiplier => {\n  return num => num * multiplier;\n};\n\n/**\n * Modifies the property value after the transform function using options\n * @param {Array|number} value - property value of the variable\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Array|number} - the modified property values from the options\n */\nconst handleOptions = (value, options) => {\n  const { round, floor, ceil, toFixed } = options;\n  if (round) return Math.round(value);\n  if (floor) return Math.floor(value);\n  if (ceil) return Math.ceil(value);\n  if (toFixed !== undefined) return Number(value.toFixed(toFixed));\n  return value;\n};\n\n/**\n * Modifies the property value of the variable with the transform function\n * @param {Array|number} propertyValue - property value of the variable\n * @param {Function} fn - function to run the value or expression output values through\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Array|number} - the modified property values\n */\nconst modifyValue = (propertyValue, fn, options) => {\n  if (typeof propertyValue === 'number') {\n    return handleOptions(fn(propertyValue), options);\n  }\n  if (!Array.isArray(propertyValue)) return propertyValue;\n\n  const expressionType = propertyValue[0];\n  let sliceIndex;\n  let outputCondition;\n  let fallback;\n\n  switch (expressionType) {\n    case 'interpolate':\n    case 'interpolate-hcl':\n    case 'interpolate-lab': {\n      sliceIndex = 3;\n      outputCondition = i => i % 2 !== 0;\n      break;\n    }\n    case 'step': {\n      sliceIndex = 2;\n      outputCondition = i => i % 2 === 0;\n      break;\n    }\n    case 'case': {\n      sliceIndex = 1;\n      outputCondition = i => i % 2 !== 0;\n      fallback = propertyValue.pop();\n      break;\n    }\n    case 'match': {\n      sliceIndex = 2;\n      outputCondition = i => i % 2 !== 0;\n      fallback = propertyValue.pop();\n      break;\n    }\n  }\n\n  // Rebuild modified expression\n  const nextValue = propertyValue.slice(0, sliceIndex);\n  const inputOutputs = propertyValue.slice(sliceIndex);\n  inputOutputs.forEach((val, i) => {\n    if (outputCondition(i)) {\n      nextValue.push(modifyValue(val, fn, options));\n    } else {\n      nextValue.push(val);\n    }\n  });\n  if (fallback !== undefined) {\n    nextValue.push(modifyValue(fallback, fn, options));\n  }\n\n  return nextValue;\n};\n\n/**\n * Recurses the variables object to find the actual property values\n * @param {Object|Array|number} variables - the original variable object or variable\n * @param {Function} fn - function to run the value or expression output values through\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Object} - the modified variables\n */\nconst replaceVariables = (variables, fn, options) => {\n  if (typeof variables !== 'object' || Array.isArray(variables)) {\n    return modifyValue(variables, fn, options);\n  }\n  return Object.keys(variables).reduce((acc, key) => {\n    acc[key] = replaceVariables(variables[key], fn, options);\n    return acc;\n  }, {});\n};\n\n/**\n * Modify number values in variables using a math operation\n * @param {Object|Array|number} variables - the original variable object or variable\n * @param {string} operator - Math operation, one of - '*', '/', '+', '-'\n * @param {number} modifier - number argument to modify value by\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Object} - the modified variables\n */\nconst modifyNumberVariables = (variables, operator, modifier, options = {}) => {\n  let nextVariables = JSON.parse(JSON.stringify(variables));\n  let mathFn = num => num;\n\n  switch (operator) {\n    case '*': {\n      mathFn = getMultiplyFn(modifier);\n      break;\n    }\n    case '/': {\n      mathFn = getDivideFn(modifier);\n      break;\n    }\n    case '+': {\n      mathFn = getAddFn(modifier);\n      break;\n    }\n    case '-': {\n      mathFn = getSubtractFn(modifier);\n      break;\n    }\n    default: {\n      throw new Error(`${operator} is not a valid operator.`);\n    }\n  }\n\n  nextVariables = replaceVariables(variables, mathFn, options);\n\n  return nextVariables;\n};\n\nexport { modifyNumberVariables };\n","import stringifyPretty from 'json-stringify-pretty-compact';\nimport { latest } from '@mapbox/mapbox-gl-style-spec';\n\nexport const createLayerTemplate = (baseLayer, variants) => {\n  let layer = baseLayer;\n  if (!layer) layer = Object.values(variants)[0];\n\n  let baseStyle = stringifyPretty(layer, { indent: 2 })\n    .split('\\n')\n    .join('\\n  ');\n\n  let allOverrides = '';\n\n  // TODO currently making the primary differentiator style id until we sort differences\n  for (const styleName in variants) {\n    let overrides = {};\n\n    if (layer && Object.keys(variants).length) {\n      let variantLayer = variants[styleName];\n\n      Object.entries(variantLayer).forEach(([k, v]) => {\n        if (k === 'layout' || k === 'paint') return;\n        if (JSON.stringify(v) === JSON.stringify(layer[k])) return;\n        overrides[k] = v;\n      });\n\n      if (variantLayer.layout) {\n        // If a property does not exist on a variant, override with the default\n        const defaultLayout = Object.keys(layer.layout || {}).reduce(\n          (acc, k) => {\n            acc[k] = latest[`layout_${layer.type}`][k].default;\n            return acc;\n          },\n          {}\n        );\n\n        const fullLayout = { ...defaultLayout, ...variantLayer.layout };\n\n        Object.entries(fullLayout).forEach(([k, v]) => {\n          if (JSON.stringify(v) === JSON.stringify(layer?.layout?.[k])) return;\n          if (!overrides.layout) overrides.layout = {};\n          overrides.layout[k] = v;\n        });\n      }\n\n      if (variantLayer.paint) {\n        // If a property does not exist on a variant, override with the default\n        const defaultPaint = Object.keys(layer.paint || {}).reduce((acc, k) => {\n          acc[k] = latest[`paint_${layer.type}`][k].default;\n          return acc;\n        }, {});\n\n        const fullPaint = { ...defaultPaint, ...variantLayer.paint };\n\n        Object.entries(fullPaint).forEach(([k, v]) => {\n          if (JSON.stringify(v) === JSON.stringify(layer?.paint?.[k])) return;\n          if (!overrides.paint) overrides.paint = {};\n          overrides.paint[k] = v;\n        });\n      }\n    }\n    overrides = stringifyPretty(overrides, { indent: 2 })\n      .split('\\n')\n      .join('\\n    ');\n\n    allOverrides += `${\n      !!allOverrides ? ' else if' : 'if'\n    } (context.styleName === '${styleName}') {\n      overrides = ${overrides};\n  }`;\n  }\n\n  const fileContent = `module.exports.default = (context) => {\n  const baseStyle = ${baseStyle};\n  let overrides = {};\n  ${allOverrides}\n  return {\n    baseStyle,\n    overrides\n  };\n};`;\n\n  return fileContent;\n};\n\nexport const createVariantTemplate = style => {\n  const templateStyle = {\n    ...style,\n    layers: style.layers.map(l => l.id)\n  };\n\n  const fileContent = `module.exports.context = {\n  colors: {\n  },\n  styleName: '${style.name}'\n};\n\nmodule.exports.template = ${JSON.stringify(templateStyle, null, 2)};\n`;\n\n  return fileContent;\n};\n"],"names":["_buildStyle","require","_mergeOverrides","_mergeVariables","_modifyNumberVariables","_createTemplate","Object","defineProperty","exports","value","buildStyle","_fs","_interopRequireDefault","_path","_chalk","_lodash","_lodash2","_primitiveUtils","obj","__esModule","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","_defineProperty","key","_toPropertyKey","enumerable","configurable","writable","arg","_toPrimitive","_typeof","String","input","hint","prim","toPrimitive","undefined","res","Number","fileExists","path","fs","accessSync","constants","R_OK","e","findUndefined","v","undefinedValues","keys","map","undefinedProps","filter","validateLayer","layer","messages","concat","undefinedProp","JSON","stringify","getLayerBuildErrorMessage","error","stack","lineNumber","split","layerFile","readFileSync","layerLine","chalk","red","bold","blue","message","getFileDoesNotExistMessage","fileType","getFileErrorMessage","logLayerValidationMessages","validationMessages","forEach","console","warn","loadLayerBuilder","Error","loadStyle","buildLayer","context","builder","contextMatches","_fileStr$match","fileStr","match","mergeOverrides","baseStyle","overrides","usedContext","absoluteStylePath","layerDir","_options$verbose","options","arguments","verbose","_loadStyle","resolve","template","styleJson","parse","log","unusedContext","cloneDeep","usedContextPaths","layers","layerName","layerPath","_buildLayer","str","join","contextPath","deleteProp","layerValidationMessages","removeEmpty","flattenObject","prefix","reduce","acc","k","pre","isPlainObject","assign","unusedContextPaths","object","last","pop","next","isEmpty","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","target","source","getOwnPropertyDescriptors","defineProperties","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_i","_s","_e","_x","_r","_arr","_n","_d","done","err","extended","entries","_ref","_ref2","isObject","merge","current","extender","merged","mergeVariables","_len","variableGroups","_key","cur","getDivideFn","divisor","num","getSubtractFn","toSubtract","getAddFn","toAdd","getMultiplyFn","multiplier","handleOptions","round","floor","ceil","toFixed","Math","modifyValue","propertyValue","fn","expressionType","sliceIndex","outputCondition","fallback","nextValue","inputOutputs","val","replaceVariables","variables","modifyNumberVariables","operator","modifier","nextVariables","mathFn","_jsonStringifyPrettyCompact","_mapboxGlStyleSpec","createLayerTemplate","baseLayer","variants","values","stringifyPretty","indent","allOverrides","_loop","variantLayer","styleName","layout","defaultLayout","latest","type","fullLayout","_ref3","_layer","_layer$layout","_ref4","paint","defaultPaint","fullPaint","_ref5","_layer2","_layer2$paint","_ref6","fileContent","createVariantTemplate","style","templateStyle","l","id"],"version":3,"file":"main.js.map"}