{"mappings":";;;;A,C;A,M,C,c,C,c,E,C,a,C;I,K,E,I;A,C;A,M,C,c,C,c,E,C,a,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,oC;I,C;A,C;A,M,C,c,C,c,E,C,iB,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,wC;I,C;A,C;A,M,C,c,C,c,E,C,iB,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,wC;I,C;A,C;A,M,C,c,C,c,E,C,wB,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,+C;I,C;A,C;;A,C;A,M,C,c,C,yB,E,C,a,C;I,K,E,I;A,C;A,yB,C,U,G,I,C,C;;ACCA,GAAA,CAAA,yBAAA,GAAA,4CAAA,CAAA,SAAA;;AACA,GAAA,CAAA,2BAAA,GAAA,4CAAA,CAAA,WAAA;;AACA,GAAA,CAAA,4BAAA,GAAA,4CAAA,CAAA,YAAA;;A,C;A,M,C,c,C,yB,E,C,a,C;I,K,E,I;A,C;A,yB,C,c,G,I,C,C;S,6B,C,M,E,c,E,C;I,G,C,I,G,M,C,I,C,M;I,E,E,M,C,qB,E,C;Q,G,C,O,G,M,C,qB,C,M;Q,c,K,O,G,O,C,M,C,Q,C,G,E,C;Y,M,C,M,C,wB,C,M,E,G,E,U;Q,C,I,I,C,I,C,K,C,I,E,O;I,C;I,M,C,I;A,C;S,mC,C,M,E,C;I,G,C,G,C,C,G,C,E,C,G,S,C,M,E,C,G,C;Q,G,C,M,G,I,I,S,C,C,I,S,C,C,I,C;Q,C;Q,C,G,C,G,6B,C,M,C,M,I,C,E,O,C,Q,C,G,E,C;Y,qC,C,M,E,G,E,M,C,G;Q,C,I,M,C,yB,G,M,C,gB,C,M,E,M,C,yB,C,M,K,6B,C,M,C,M,G,O,C,Q,C,G,E,C;Y,M,C,c,C,M,E,G,E,M,C,wB,C,M,E,G;Q,C;I,C;I,M,C,M;A,C;S,qC,C,G,E,G,E,K,E,C;I,E,E,G,I,G,E,M,C,c,C,G,E,G,E,C;Q,K,E,K;Q,U,E,I;Q,Y,E,I;Q,Q,E,I;I,C;S,G,C,G,I,K;I,M,C,G;A,C;S,oC,C,G,E,C,E,C;I,M,C,qC,C,G,K,2C,C,G,E,C,K,iD,C,G,E,C,K,sC;A,C;S,sC,G,C;I,K,C,G,C,S,C,C;A,C;S,iD,C,C,E,M,E,C;I,E,G,C,E,M;I,E,E,M,C,C,K,C,S,M,C,uC,C,C,E,M;I,G,C,C,G,M,C,S,C,Q,C,I,C,C,E,K,C,C,E,E;I,E,E,C,K,C,W,C,C,W,E,C,G,C,C,W,C,I;I,E,E,C,K,C,Q,C,K,C,M,M,C,K,C,I,C,C;I,E,E,C,K,C,yD,I,C,C,G,M,C,uC,C,C,E,M;A,C;S,uC,C,G,E,G,E,C;I,E,E,G,I,I,I,G,G,G,C,M,E,G,G,G,C,M;I,G,C,G,C,C,G,C,E,I,G,G,C,K,C,G,G,C,G,G,E,C,G,I,C,C,I,G,C,C;I,M,C,I;A,C;S,2C,C,G,E,C,E,C;I,G,C,E,G,G,I,I,G,I,G,M,C,M,K,C,c,G,C,M,C,Q,K,G,C,C;I,E,E,E,I,I,E,M;I,G,C,I,G,C,C;I,G,C,E,G,I;I,G,C,E,G,K;I,G,C,E,E,E;I,G,C,C;Q,G,C,E,G,E,C,I,C,G,K,E,I,E,G,E,C,I,I,I,G,E,G,I,C,C;Y,I,C,I,C,E,C,K;Y,E,E,C,I,I,C,M,K,C,E,K;Q,C;I,C,C,K,E,G,E,C;Q,E,G,I;Q,E,G,G;I,C,Q,C;Q,G,C,C;Y,E,G,E,I,E,C,C,Y,I,E,E,C,C;Q,C,Q,C;Y,E,E,E,E,K,C,E;Q,C;I,C;I,M,C,I;A,C;S,qC,C,G,E,C;I,E,E,K,C,O,C,G,G,M,C,G;A,C;ACHA,EAWA,AAXA;;;;;;;;;;;CAWA,AAXA,EAWA,CACO,GAAA,CAAMyE,oCAAc,GAAG,QAAA,CAAjBA,cAAiB,CAACjB,SAAD,EAAYC,SAAZ,EAA0B,CAAjD;IACL,GAAA,CAAMiB,QAAQ,GAAGlD,IAAI,CAAC2C,KAAL,CAAW3C,IAAI,CAACC,SAAL,CAAe+B,SAAf;IAE5B3C,MAAM,CAAC8D,OAAP,CAAelB,SAAf,EAA0BT,OAA1B,CAAkC,QAAA,CAAA,IAAA,EAAY,CAA9CnC;QAA8C,GAAA,CAAA,KAAA,GAAA,oCAAA,CAAA,IAAA,EAAA,CAAA,GAAV+D,CAAU,GAAA,KAAA,CAAA,CAAA,GAAPpE,CAAO,GAAA,KAAA,CAAA,CAAA;QAC5C,EAAA,EAAIoE,CAAC,KAAK,CAAN,WAAkBA,CAAC,KAAK,CAA5B,QACEF,QAAQ,CAACE,CAAD,IAAR,mCAAA,CAAA,mCAAA,CAAA,CAAA;QAAA,CAAA,EAAmBF,QAAQ,CAACE,CAAD,IAAQpE,CAAnC;aAEAkE,QAAQ,CAACE,CAAD,IAAMpE,CAAd;IAEH,CAND;IAQA,MAAA,CAAOkE,QAAP;AACD,CAZM;A,yB,C,c,G,oC;;;S,4C,C,G,E,C;I,M,C,G,I,G,C,U,G,G,G,C;Q,C,U,G;I,C;A,C;S,wC,C,G,E,C;I,M,C,wC,C,G,K,sC,C,G,K,iD,C,G,K,wC;A,C;S,wC,G,C;I,K,C,G,C,S,C,C;A,C;S,iD,C,C,E,M,E,C;I,E,G,C,E,M;I,E,E,M,C,C,K,C,S,M,C,uC,C,C,E,M;I,G,C,C,G,M,C,S,C,Q,C,I,C,C,E,K,C,C,E,E;I,E,E,C,K,C,W,C,C,W,E,C,G,C,C,W,C,I;I,E,E,C,K,C,Q,C,K,C,M,M,C,K,C,I,C,C;I,E,E,C,K,C,yD,I,C,C,G,M,C,uC,C,C,E,M;A,C;S,sC,C,I,E,C;I,E,E,M,C,M,K,C,c,I,C,M,C,Q,K,I,I,I,C,C,gB,I,E,M,C,K,C,I,C,I;A,C;S,wC,C,G,E,C;I,E,E,K,C,O,C,G,G,M,C,uC,C,G;A,C;S,uC,C,G,E,G,E,C;I,E,E,G,I,I,I,G,G,G,C,M,E,G,G,G,C,M;I,G,C,G,C,C,G,C,E,I,G,G,C,K,C,G,G,C,G,G,E,C,G,I,C,C,I,G,C,C;I,M,C,I;A,C;S,qC,C,G,E,G,E,K,E,C;I,E,E,G,I,G,E,M,C,c,C,G,E,G,E,C;Q,K,E,K;Q,U,E,I;Q,Y,E,I;Q,Q,E,I;I,C;S,G,C,G,I,K;I,M,C,G;A,C;S,6B,C,I,E,C;I,M,C,6B,G,C,a,M,C,M,I,C,W,M,C,M,C,Q,G,Q,C,G,E,C;Q,M,C,M,C,G;I,C,G,Q,C,G,E,C;Q,M,C,G,I,C,a,M,C,M,I,G,C,W,K,M,I,G,K,M,C,S,G,C,U,M,C,G;I,C,E,6B,C,I;A,C;ADLP,EAKA,AALA;;;;;CAKA,AALA,EAKA,CACA,GAAA,CAAM1E,gCAAU,GAAG,QAAA,CAAbA,UAAa,CAACC,IAAD,EAAU,CAA7B;IACE,GAAA,CAAI,CAAJ;QACEC,yBAAAA,CAAAA,CAAAA,UAAGC,UAAH,CAAcF,I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","sources":["src/index.js","src/lib/build-style.js","src/lib/merge-overrides.js","src/lib/merge-variables.js","src/lib/modify-number-variables.js"],"sourcesContent":["import { buildStyle } from \"./lib/build-style\";\nimport { mergeOverrides } from \"./lib/merge-overrides\";\nimport { mergeVariables } from \"./lib/merge-variables\";\nimport { modifyNumberVariables } from './lib/modify-number-variables';\n\nexport {\n  mergeOverrides,\n  buildStyle,\n  mergeVariables,\n  modifyNumberVariables\n};\n","#!/usr/bin/env node\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\n\nimport { mergeOverrides } from './merge-overrides';\n\n/**\n * Check if a file exists\n *\n * @param {string} path - the file path\n * @return {boolean} whether the file exists\n */\nconst fileExists = (path) => {\n  try {\n    fs.accessSync(path, fs.constants.R_OK);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Determine whether a value is or contains undefined within it\n *\n * @param {*} v - the value to check\n * @returns {boolean|array}\n */\nconst findUndefined = v => {\n  if (v == undefined) return true;\n\n  // For objects and arrays, we want to know the keys/indices\n  // that contain undefined values\n  if (typeof v === 'object' || Array.isArray(v)) {\n    const undefinedValues = Object.keys(v)\n      .map(key => {\n        const undefinedProps = findUndefined(v[key]);\n        if (!undefinedProps) return null;\n\n        // This is the leaf node, just return the key\n        if (typeof undefinedProps === 'boolean') return key;\n\n        // Undefined properties are deeper, include key and further branches\n        return { [key]: undefinedProps };\n      })\n      .filter(v => !!v);\n\n    return undefinedValues.length ? undefinedValues : false;\n  }\n\n  return false;\n};\n\n/**\n * Check built layer for validity\n *\n * @param {object} layer - the layer to check\n * @returns {array} an array of validation messages\n */\nconst validateLayer = layer => {\n  let messages = [];\n\n  const undefinedProps = findUndefined(layer);\n  if (undefinedProps?.length) {\n    messages = [\n      ...messages,\n      ...undefinedProps.map(undefinedProp => {\n        return `Undefined property at ${JSON.stringify(undefinedProp)}`;\n      })\n    ];\n  }\n\n  return messages;\n};\n\n/**\n * Get a useful error message when something goes wrong while building a layer\n *\n * Avoid stack traces, try to find error description and line in the layer file.\n *\n * @param {Error} error - the error object thrown\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {string}\n */\nconst getLayerBuildErrorMessage = (error, name, path) => {\n  const { stack } = error;\n\n  // Get first \"at\" line of stack trace, split : to get line number\n  const lineNumber = stack.split('\\n')[1].split(':')[1];\n\n  // Load file and get the line at the given lineNumber\n  const layerFile = fs.readFileSync(path, 'utf8');\n  const layerLine = layerFile.split('\\n')[lineNumber - 1];\n\n  return `${chalk.red.bold('Error:')} Couldn't build layer ${chalk.blue(name)}.\n\nDetails: ${error.message} in\n  ${chalk.blue(path)}\n\n${lineNumber}: ${layerLine}`;\n};\n\n/**\n * Nicely format a file does not exist error message\n *\n * @param {string} fileType - 'layer' or 'style'\n * @param {string} name - the name of the file being loaded\n * @param {string} path - the file path being loaded\n * @returns {string}\n */\nconst getFileDoesNotExistMessage = (fileType, name, path) => {\n  return `\\n${chalk.red.bold('Error:')} Couldn't load ${fileType} ${chalk.blue(name)}, does it exist? Attempted to load from\n  ${chalk.blue(path)}\n`;\n};\n\n/**\n * Nicely format a file error message\n *\n * @param {string} fileType - 'layer' or 'style'\n * @param {string} name - the name of the file being loaded\n * @param {string} path - the file path being loaded\n * @param {string} error - the error message\n * @returns {string}\n */\nconst getFileErrorMessage = (fileType, name, path, error) => {\n  return `\\n${chalk.red.bold('Error:')} Couldn't load ${fileType} ${chalk.blue(name)}. Received this error:\n\n${chalk.red(error.stack)}\n`;\n};\n\n/**\n * Nicely format and log validation messages for a style\n *\n * @param {string} style - the name of the style\n * @param {object} validationMessages - the validation messages, keyed by layer name\n * @returns {Void}\n */\nconst logValidationMessages = (style, validationMessages) => {\n  console.warn(`Found issues in style ${chalk.blue(style)}:`);\n\n  Object.keys(validationMessages).forEach(layer => {\n    console.warn(`  Layer ${chalk.blue(layer)}:`);\n    validationMessages[layer].forEach(message => {\n      console.warn(`    ${message}`);\n    });\n  });\n\n  console.warn('');\n};\n\n/**\n * Load the function that will build the layer.\n *\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {function} the layer builder\n */\nconst loadLayerBuilder = (name, path) => {\n  if (!fileExists(path)) {\n    throw new Error(getFileDoesNotExistMessage('layer', name, path));\n  }\n\n  try {\n    return require(path).default;\n  } catch (error) {\n    throw new Error(getFileErrorMessage('layer', name, path, error));\n  }\n};\n\n/**\n * Load a style, wrapped here to catch and format errors.\n *\n * @param {string} path - the file path to the style\n * @param {string} name - the style name\n * @returns {object}\n */\nconst loadStyle = (name, path) => {\n  if (!fileExists(path)) {\n    throw new Error(getFileDoesNotExistMessage('style', name, path));\n  }\n\n  try {\n    return require(path);\n  } catch (error) {\n    throw new Error(getFileErrorMessage('style', name, path, error));\n  }\n};\n\n/**\n * Build a layer\n *\n * @param {object} context - the context, which contains variables for the layer\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {object}\n */\nconst buildLayer = (context, name, path) => {\n  const builder = loadLayerBuilder(name, path);\n\n  let layer;\n  try {\n    layer = builder(context);\n  } catch (error) {\n    throw new Error(getLayerBuildErrorMessage(error, name, path));\n  }\n\n  return mergeOverrides(layer.baseStyle, layer.overrides);\n};\n\n/**\n * Build style\n *\n * @param {string} name - the name of the style to build\n * @param {string} styleDir - the input directory that contains styles\n * @param {string} layerDir - the input directory that contains layers\n * @returns {Object}\n */\nexport const buildStyle = (stylePath, layerDir, options = {}) => {\n  if (!stylePath) {\n    throw new Error('Must provide stylePath.');\n  }\n  if (!layerDir) {\n    throw new Error('Must provide layerDir.');\n  }\n\n  const name = path.basename(stylePath, '.js');\n\n  const verbose = options?.verbose ?? false;\n\n  const { context, template } = loadStyle(name, path.resolve(stylePath));\n\n  const styleJson = JSON.parse(JSON.stringify(template));\n\n  let validationMessages = {};\n\n  if (verbose) {\n    console.log(`Building style ${chalk.blue(name)}`);\n  }\n\n  styleJson.layers = template.layers.map(layerName => {\n    if (verbose) {\n      console.log(`  Adding layer ${chalk.blue(layerName)}`);\n    }\n\n    const layerPath = path.resolve(layerDir, `${layerName}.js`);\n    const layer = buildLayer(context, layerName, layerPath);\n\n    // Collect validation messages for each layer\n    const layerValidationMessages = validateLayer(layer);\n    if (layerValidationMessages.length) {\n      validationMessages[layerName] = layerValidationMessages;\n    }\n\n    return layer;\n  });\n\n  if (Object.keys(validationMessages).length > 0) {\n    logValidationMessages(name, validationMessages);\n  }\n\n  return styleJson;\n};\n","/**\n * Merge overrides with a baseStyle or other overrides\n *\n * paint and layout overrides do not fully overwrite paint and layout values in\n * the baseStyle, however, they add or replaces specific properties. In this\n * way, an overrides object can specify a single paint property to modify or add\n * without overwriting all of the paint properties of the baseStyle.\n *\n * @param {object} baseStyle\n * @param {object} overrides\n * @returns {object}\n */\nexport const mergeOverrides = (baseStyle, overrides) => {\n  const extended = JSON.parse(JSON.stringify(baseStyle));\n\n  Object.entries(overrides).forEach(([k, v]) => {\n    if (k === 'layout' || k === 'paint') {\n      extended[k] = { ...extended[k], ...v };\n    } else {\n      extended[k] = v;\n    }\n  });\n\n  return extended;\n};\n\n","const isObject = v => typeof v === 'object' && !Array.isArray(v) && !!v;\n\n/**\n * Merge the current object of variables with an extender object. Variables\n * defined in extender will override variables defined in the current variables,\n * if there is overlap. Nested variables are taken into account.\n * @param {Object} current - the original variable object\n * @param {Object} extender - the extender variable object, containing overrides\n * @returns {Object} - the merged variables\n */\nconst merge = (current, extender) => {\n  const merged = JSON.parse(JSON.stringify(current));\n\n  Object.keys(extender).forEach(k => {\n    // Handle nested variables\n    if (isObject(current[k]) && isObject(extender[k])) {\n      merged[k] = merge(current[k], extender[k]);\n    }\n    else {\n      merged[k] = JSON.parse(JSON.stringify(extender[k]));\n    }\n  });\n\n  return merged;\n};\n\n\n/**\n * Merge any number of variable objects\n * @param {...Object} variableGroups - one or many variable objects, each \n * passed as a separate parameter\n * @returns {Object} the merged variable object\n */\nexport const mergeVariables = (...variableGroups) => {\n  return variableGroups.reduce((acc, cur) => merge(acc, cur), {});\n};\n","/**\n * Returns a new function that divides a number by the modifier passed here\n * @param {number} divisor - number to divide by in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getDivideFn = divisor => {\n  return num => num / divisor;\n};\n/**\n * Returns a new function that subtracts from a number by the modifier passed here\n * @param {number} toSubtract - number to subtract in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getSubtractFn = toSubtract => {\n  return num => num - toSubtract;\n};\n/**\n * Returns a new function that adds to a number by the modifier passed here\n * @param {number} toAdd - number to add in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getAddFn = toAdd => {\n  return num => num + toAdd;\n};\n/**\n * Returns a new function that multiplies a number by the modifier passed here\n * @param {number} multiplier - number to multiply by in the output function\n * @returns {Function} - a function that multiplies a number by the modifier passed\n */\nconst getMultiplyFn = multiplier => {\n  return num => num * multiplier;\n};\n\n/**\n * Modifies the property value after the transform function using options\n * @param {Array|number} value - property value of the variable\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Array|number} - the modified property values from the options\n */\nconst handleOptions = (value, options) => {\n  const { round, floor, ceil, toFixed } = options;\n  if (round) return Math.round(value);\n  if (floor) return Math.floor(value);\n  if (ceil) return Math.ceil(value);\n  if (toFixed !== undefined) return Number(value.toFixed(toFixed));\n  return value;\n};\n\n/**\n * Modifies the property value of the variable with the transform function\n * @param {Array|number} propertyValue - property value of the variable\n * @param {Function} fn - function to run the value or expression output values through\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Array|number} - the modified property values\n */\nconst modifyValue = (propertyValue, fn, options) => {\n  if (typeof propertyValue === 'number') {\n    return handleOptions(fn(propertyValue), options);\n  }\n  if (!Array.isArray(propertyValue)) return propertyValue;\n\n  const expressionType = propertyValue[0];\n  let sliceIndex;\n  let outputCondition;\n  let fallback;\n\n  switch (expressionType) {\n    case 'interpolate':\n    case 'interpolate-hcl':\n    case 'interpolate-lab': {\n      sliceIndex = 3;\n      outputCondition = i => i % 2 !== 0;\n      break;\n    }\n    case 'step': {\n      sliceIndex = 2;\n      outputCondition = i => i % 2 === 0;\n      break;\n    }\n    case 'case': {\n      sliceIndex = 1;\n      outputCondition = i => i % 2 !== 0;\n      fallback = propertyValue.pop();\n      break;\n    }\n    case 'match': {\n      sliceIndex = 2;\n      outputCondition = i => i % 2 !== 0;\n      fallback = propertyValue.pop();\n      break;\n    }\n  }\n\n  // Rebuild modified expression\n  const nextValue = propertyValue.slice(0, sliceIndex);\n  const inputOutputs = propertyValue.slice(sliceIndex);\n  inputOutputs.forEach((val, i) => {\n    if (outputCondition(i)) {\n      nextValue.push(modifyValue(val, fn, options));\n    } else {\n      nextValue.push(val);\n    }\n  });\n  if (fallback !== undefined) {\n    nextValue.push(modifyValue(fallback, fn, options));\n  }\n\n  return nextValue;\n};\n\n/**\n * Recurses the variables object to find the actual property values\n * @param {Object|Array|number} variables - the original variable object or variable\n * @param {Function} fn - function to run the value or expression output values through\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Object} - the modified variables\n */\nconst replaceVariables = (variables, fn, options) => {\n  if (typeof variables !== 'object' || Array.isArray(variables)) {\n    return modifyValue(variables, fn, options);\n  }\n  return Object.keys(variables).reduce((acc, key) => {\n    acc[key] = replaceVariables(variables[key], fn, options);\n    return acc;\n  }, {});\n};\n\n/**\n * Modify number values in variables using a math operation\n * @param {Object|Array|number} variables - the original variable object or variable\n * @param {string} operator - Math operation, one of - '*', '/', '+', '-'\n * @param {number} modifier - number argument to modify value by\n * @param {Object} [options] - options object with keys: round?: boolean, floor?: boolean, ceil?: boolean, toFixed?: number\n * @returns {Object} - the modified variables\n */\nconst modifyNumberVariables = (variables, operator, modifier, options = {}) => {\n  let nextVariables = JSON.parse(JSON.stringify(variables));\n  let mathFn = num => num;\n\n  switch (operator) {\n    case '*': {\n      mathFn = getMultiplyFn(modifier);\n      break;\n    }\n    case '/': {\n      mathFn = getDivideFn(modifier);\n      break;\n    }\n    case '+': {\n      mathFn = getAddFn(modifier);\n      break;\n    }\n    case '-': {\n      mathFn = getSubtractFn(modifier);\n      break;\n    }\n    default: {\n      throw new Error(`${operator} is not a valid operator.`);\n    }\n  }\n\n  nextVariables = replaceVariables(variables, mathFn, options);\n\n  return nextVariables;\n};\n\nexport { modifyNumberVariables };\n"],"names":["fileExists","path","fs","accessSync","constants","R_OK","e","findUndefined","v","undefined","Array","isArray","undefinedValues","Object","keys","map","key","undefinedProps","filter","length","validateLayer","layer","messages","undefinedProp","JSON","stringify","getLayerBuildErrorMessage","error","name","stack","lineNumber","split","layerFile","readFileSync","layerLine","chalk","red","bold","blue","message","getFileDoesNotExistMessage","fileType","getFileErrorMessage","logValidationMessages","style","validationMessages","console","warn","forEach","loadLayerBuilder","Error","require","loadStyle","buildLayer","context","builder","baseStyle","overrides","buildStyle","stylePath","layerDir","options","basename","verbose","resolve","template","styleJson","parse","log","layers","layerName","layerPath","layerValidationMessages","mergeOverrides","extended","entries","k","isObject","merge","current","extender","merged","mergeVariables","variableGroups","reduce","acc","cur","getDivideFn","divisor","num","getSubtractFn","toSubtract","getAddFn","toAdd","getMultiplyFn","multiplier","handleOptions","value","round","floor","ceil","toFixed","Math","Number","modifyValue","propertyValue","fn","expressionType","sliceIndex","outputCondition","fallback","i","pop","nextValue","slice","inputOutputs","val","push","replaceVariables","variables","modifyNumberVariables","operator","modifier","nextVariables","mathFn"],"version":3,"file":"main.js.map","sourceRoot":"../"}