{"mappings":";;;;A,C;A,M,C,c,C,c,E,C,a,C;I,K,E,I;A,C;A,M,C,c,C,c,E,C,e,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,sC;I,C;A,C;A,M,C,c,C,c,E,C,a,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,oC;I,C;A,C;A,M,C,c,C,c,E,C,iB,C;I,U,E,I;I,G,E,Q,C,G,G,C;Q,M,C,wC;I,C;A,C;;A,C;A,M,C,c,C,yB,E,C,a,C;I,K,E,I;A,C;A,yB,C,Y,G,I,C,C;S,6B,C,M,E,c,E,C;I,G,C,I,G,M,C,I,C,M;I,E,E,M,C,qB,E,C;Q,G,C,O,G,M,C,qB,C,M;Q,c,K,O,G,O,C,M,C,Q,C,G,E,C;Y,M,C,M,C,wB,C,M,E,G,E,U;Q,C,I,I,C,I,C,K,C,I,E,O;I,C;I,M,C,I;A,C;S,mC,C,M,E,C;I,G,C,G,C,C,G,C,E,C,G,S,C,M,E,C,G,C;Q,G,C,M,G,I,I,S,C,C,I,S,C,C,I,C;Q,C;Q,C,G,C,G,6B,C,M,C,M,I,C,E,O,C,Q,C,G,E,C;Y,qC,C,M,E,G,E,M,C,G;Q,C,I,M,C,yB,G,M,C,gB,C,M,E,M,C,yB,C,M,K,6B,C,M,C,M,G,O,C,Q,C,G,E,C;Y,M,C,c,C,M,E,G,E,M,C,wB,C,M,E,G;Q,C;I,C;I,M,C,M;A,C;S,qC,C,G,E,G,E,K,E,C;I,E,E,G,I,G,E,M,C,c,C,G,E,G,E,C;Q,K,E,K;Q,U,E,I;Q,Y,E,I;Q,Q,E,I;I,C;S,G,C,G,I,K;I,M,C,G;A,C;S,oC,C,G,E,C,E,C;I,M,C,qC,C,G,K,2C,C,G,E,C,K,iD,C,G,E,C,K,sC;A,C;S,sC,G,C;I,K,C,G,C,S,C,C;A,C;S,iD,C,C,E,M,E,C;I,E,G,C,E,M;I,E,E,M,C,C,K,C,S,M,C,uC,C,C,E,M;I,G,C,C,G,M,C,S,C,Q,C,I,C,C,E,K,C,C,E,E;I,E,E,C,K,C,W,C,C,W,E,C,G,C,C,W,C,I;I,E,E,C,K,C,Q,C,K,C,M,M,C,K,C,I,C,C;I,E,E,C,K,C,yD,I,C,C,G,M,C,uC,C,C,E,M;A,C;S,uC,C,G,E,G,E,C;I,E,E,G,I,I,I,G,G,G,C,M,E,G,G,G,C,M;I,G,C,G,C,C,G,C,E,I,G,G,C,K,C,G,G,C,G,G,E,C,G,I,C,C,I,G,C,C;I,M,C,I;A,C;S,2C,C,G,E,C,E,C;I,G,C,E,G,G,I,I,G,I,G,M,C,M,K,C,c,G,C,M,C,Q,K,G,C,C;I,E,E,E,I,I,E,M;I,G,C,I,G,C,C;I,G,C,E,G,I;I,G,C,E,G,K;I,G,C,E,E,E;I,G,C,C;Q,G,C,E,G,E,C,I,C,G,K,E,I,E,G,E,C,I,I,I,G,E,G,I,C,C;Y,I,C,I,C,E,C,K;Y,E,E,C,I,I,C,M,K,C,E,K;Q,C;I,C,C,K,E,G,E,C;Q,E,G,I;Q,E,G,G;I,C,Q,C;Q,G,C,C;Y,E,G,E,I,E,C,C,Y,I,E,E,C,C;Q,C,Q,C;Y,E,E,E,E,K,C,E;Q,C;I,C;I,M,C,I;A,C;S,qC,C,G,E,C;I,E,E,K,C,O,C,G,G,M,C,G;A,C;ACAA,EAWA,AAXA;;;;;;;;;;;CAWA,AAXA,EAWA,CACO,GAAA,CAAMA,kCAAY,GAAG,QAAA,CAAfA,YAAe,CAACC,SAAD,EAAYC,SAAZ,EAA0B,CAA/C;IACL,GAAA,CAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,SAAf;IAE5BM,MAAM,CAACC,OAAP,CAAeN,SAAf,EAA0BO,OAA1B,CAAkC,QAAA,CAAA,IAAA,EAAY,CAA9CF;QAA8C,GAAA,CAAA,KAAA,GAAA,oCAAA,CAAA,IAAA,EAAA,CAAA,GAAVG,CAAU,GAAA,KAAA,CAAA,CAAA,GAAPC,CAAO,GAAA,KAAA,CAAA,CAAA;QAC5C,EAAA,EAAID,CAAC,KAAK,CAAN,WAAkBA,CAAC,KAAK,CAA5B,QACEP,QAAQ,CAACO,CAAD,IAAR,mCAAA,CAAA,mCAAA,CAAA,CAAA;QAAA,CAAA,EAAmBP,QAAQ,CAACO,CAAD,IAAQC,CAAnC;aAEAR,QAAQ,CAACO,CAAD,IAAMC,CAAd;IAEH,CAND;IAQA,MAAA,CAAOR,QAAP;AACD,CAZM;A,yB,C,Y,G,kC;;;;A,C;A,M,C,c,C,yB,E,C,a,C;I,K,E,I;A,C;A,yB,C,U,G,I,C,C;;ACXP,GAAA,CAAA,yBAAA,GAAA,4CAAA,CAAA,SAAA;;AACA,GAAA,CAAA,2BAAA,GAAA,4CAAA,CAAA,WAAA;;AACA,GAAA,CAAA,4BAAA,GAAA,4CAAA,CAAA,YAAA;;S,4C,C,G,E,C;I,M,C,G,I,G,C,U,G,G,G,C;Q,C,U,G;I,C;A,C;S,wC,C,G,E,C;I,M,C,wC,C,G,K,sC,C,G,K,iD,C,G,K,wC;A,C;S,wC,G,C;I,K,C,G,C,S,C,C;A,C;S,iD,C,C,E,M,E,C;I,E,G,C,E,M;I,E,E,M,C,C,K,C,S,M,C,uC,C,C,E,M;I,G,C,C,G,M,C,S,C,Q,C,I,C,C,E,K,C,C,E,E;I,E,E,C,K,C,W,C,C,W,E,C,G,C,C,W,C,I;I,E,E,C,K,C,Q,C,K,C,M,M,C,K,C,I,C,C;I,E,E,C,K,C,yD,I,C,C,G,M,C,uC,C,C,E,M;A,C;S,sC,C,I,E,C;I,E,E,M,C,M,K,C,c,I,C,M,C,Q,K,I,I,I,C,C,gB,I,E,M,C,K,C,I,C,I;A,C;S,wC,C,G,E,C;I,E,E,K,C,O,C,G,G,M,C,uC,C,G;A,C;S,uC,C,G,E,G,E,C;I,E,E,G,I,I,I,G,G,G,C,M,E,G,G,G,C,M;I,G,C,G,C,C,G,C,E,I,G,G,C,K,C,G,G,C,G,G,E,C,G,I,C,C,I,G,C,C;I,M,C,I;A,C;S,qC,C,G,E,G,E,K,E,C;I,E,E,G,I,G,E,M,C,c,C,G,E,G,E,C;Q,K,E,K;Q,U,E,I;Q,Y,E,I;Q,Q,E,I;I,C;S,G,C,G,I,K;I,M,C,G;A,C;S,6B,C,I,E,C;I,M,C,6B,G,C,a,M,C,M,I,C,W,M,C,M,C,Q,G,Q,C,G,E,C;Q,M,C,M,C,G;I,C,G,Q,C,G,E,C;Q,M,C,G,I,C,a,M,C,M,I,G,C,W,K,M,I,G,K,M,C,S,G,C,U,M,C,G;I,C,E,6B,C,I;A,C;AAIA,EAKA,AALA;;;;;CAKA,AALA,EAKA,CACA,GAAA,CAAMS,mCAAa,GAAG,QAAA,CAAhBA,aAAgB,CAAAD,EAAC,EAAI,CAA3B;IACE,EAAA,EAAIA,EAAC,IAAIE,SAAT,EAAoB,MAAA,CAAO,IAAP,CAEpB,CAFA,AAEA,EAFA,AAEA,yDAFA;IAGA,EAAA,AAAA,8BAAA;IACA,EAAA,EAAI,6BAAA,CAAOF,EAAP,MAAa,C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","sources":["src/index.js","src/lib/add-overrides.js","src/lib/build-style.js","src/lib/merge-variables.js"],"sourcesContent":["import { addOverrides } from \"./lib/add-overrides\";\nimport { buildStyle } from \"./lib/build-style\";\nimport { mergeVariables } from \"./lib/merge-variables\";\n\nexport {\n  addOverrides,\n  buildStyle,\n  mergeVariables\n};\n","/**\n * Add overrides to a baseStyle\n *\n * paint and layout overrides do not fully overwrite paint and layout values in\n * the baseStyle, however, they add or replaces specific properties. In this\n * way, an overrides object can specify a single paint property to modify or add\n * without overwriting all of the paint properties of the baseStyle.\n *\n * @param {object} baseStyle\n * @param {object} overrides\n * @returns {object}\n */\nexport const addOverrides = (baseStyle, overrides) => {\n  const extended = JSON.parse(JSON.stringify(baseStyle));\n\n  Object.entries(overrides).forEach(([k, v]) => {\n    if (k === 'layout' || k === 'paint') {\n      extended[k] = { ...extended[k], ...v };\n    } else {\n      extended[k] = v;\n    }\n  });\n\n  return extended;\n};\n\n","#!/usr/bin/env node\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\n\nimport { addOverrides } from './add-overrides';\n\n/**\n * Determine whether a value is or contains undefined within it\n *\n * @param {*} v - the value to check\n * @returns {boolean|array}\n */\nconst findUndefined = v => {\n  if (v == undefined) return true;\n\n  // For objects and arrays, we want to know the keys/indices\n  // that contain undefined values\n  if (typeof v === 'object' || Array.isArray(v)) {\n    const undefinedValues = Object.keys(v)\n      .map(key => {\n        const undefinedProps = findUndefined(v[key]);\n        if (!undefinedProps) return null;\n\n        // This is the leaf node, just return the key\n        if (typeof undefinedProps === 'boolean') return key;\n\n        // Undefined properties are deeper, include key and further branches\n        return { [key]: undefinedProps };\n      })\n      .filter(v => !!v);\n\n    return undefinedValues.length ? undefinedValues : false;\n  }\n\n  return false;\n};\n\n/**\n * Check built layer for validity\n *\n * @param {object} layer - the layer to check\n * @returns {array} an array of validation messages\n */\nconst validateLayer = layer => {\n  let messages = [];\n\n  const undefinedProps = findUndefined(layer);\n  if (undefinedProps?.length) {\n    messages = [\n      ...messages,\n      ...undefinedProps.map(undefinedProp => {\n        return `Undefined property at ${JSON.stringify(undefinedProp)}`;\n      })\n    ];\n  }\n\n  return messages;\n};\n\n/**\n * Get a useful error message when something goes wrong while building a layer\n *\n * Avoid stack traces, try to find error description and line in the layer file.\n *\n * @param {Error} error - the error object thrown\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {string}\n */\nconst getLayerBuildErrorMessage = (error, name, path) => {\n  const { stack } = error;\n\n  // Get first \"at\" line of stack trace, split : to get line number\n  const lineNumber = stack.split('\\n')[1].split(':')[1];\n\n  // Load file and get the line at the given lineNumber\n  const layerFile = fs.readFileSync(path, 'utf8');\n  const layerLine = layerFile.split('\\n')[lineNumber - 1];\n\n  return `${chalk.red.bold('Error:')} Couldn't build layer ${chalk.blue(name)}.\n\nDetails: ${error.message} in\n  ${chalk.blue(path)}\n\n${lineNumber}: ${layerLine}`;\n};\n\n/**\n * Nicely format a file load error message\n *\n * @param {string} fileType - 'layer' or 'style'\n * @param {string} name - the name of the file being loaded\n * @param {string} path - the file path being loaded\n * @returns {string}\n */\nconst getFileLoadErrorMessage = (fileType, name, path) => {\n  return `${chalk.red.bold('Error:')} Couldn't load ${fileType} ${chalk.blue(\n    name\n  )}, does it exist? Attempted to load from\n\n  ${chalk.blue(path)}`;\n};\n\n/**\n * Nicely format and log validation messages for a style\n *\n * @param {string} style - the name of the style\n * @param {object} validationMessages - the validation messages, keyed by layer name\n * @returns {Void}\n */\nconst logValidationMessages = (style, validationMessages) => {\n  console.warn(`Found issues in style ${chalk.blue(style)}:`);\n\n  Object.keys(validationMessages).forEach(layer => {\n    console.warn(`  Layer ${chalk.blue(layer)}:`);\n    validationMessages[layer].forEach(message => {\n      console.warn(`    ${message}`);\n    });\n  });\n\n  console.warn('');\n};\n\n/**\n * Load the function that will build the layer.\n *\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {function} the layer builder\n */\nconst loadLayerBuilder = (name, path) => {\n  try {\n    return require(path).default;\n  } catch (error) {\n    throw new Error(getFileLoadErrorMessage('layer', name, path));\n  }\n};\n\n/**\n * Load a style, wrapped here to catch and format errors.\n *\n * @param {string} path - the file path to the style\n * @param {string} name - the style name\n * @returns {object}\n */\nconst loadStyle = (name, path) => {\n  try {\n    return require(path);\n  } catch (error) {\n    throw new Error(getFileLoadErrorMessage('style', name, path));\n  }\n};\n\n/**\n * Build a layer\n *\n * @param {object} context - the context, which contains variables for the layer\n * @param {string} name - the layer name\n * @param {string} path - the file path to the layer\n * @returns {object}\n */\nconst buildLayer = (context, name, path) => {\n  const builder = loadLayerBuilder(name, path);\n\n  let layer;\n  try {\n    layer = builder(context);\n  } catch (error) {\n    throw new Error(getLayerBuildErrorMessage(error, name, path));\n  }\n\n  return addOverrides(layer.baseStyle, layer.overrides);\n};\n\n/**\n * Build style\n *\n * @param {string} name - the name of the style to build\n * @param {string} styleDir - the input directory that contains styles\n * @param {string} layerDir - the input directory that contains layers\n * @returns {Object}\n */\nexport const buildStyle = (stylePath, layerDir, options = {}) => {\n  if (!stylePath) {\n    throw new Error('Must provide stylePath.');\n  }\n  if (!layerDir) {\n    throw new Error('Must provide layerDir.');\n  }\n\n  const name = path.basename(stylePath, '.js');\n\n  const verbose = options?.verbose ?? false;\n\n  const { context, template } = loadStyle(name, path.resolve(stylePath));\n\n  const styleJson = JSON.parse(JSON.stringify(template));\n\n  let validationMessages = {};\n\n  if (verbose) {\n    console.log(`Building style ${chalk.blue(name)}`);\n  }\n\n  styleJson.layers = template.layers.map(layerName => {\n    if (verbose) {\n      console.log(`  Adding layer ${chalk.blue(layerName)}`);\n    }\n\n    const layerPath = path.resolve(layerDir, `${layerName}.js`);\n    const layer = buildLayer(context, layerName, layerPath);\n\n    // Collect validation messages for each layer\n    const layerValidationMessages = validateLayer(layer);\n    if (layerValidationMessages.length) {\n      validationMessages[layerName] = layerValidationMessages;\n    }\n\n    return layer;\n  });\n\n  if (Object.keys(validationMessages).length > 0) {\n    logValidationMessages(name, validationMessages);\n  }\n\n  return styleJson;\n};\n","const isObject = v => typeof v === 'object' && !Array.isArray(v) && !!v;\n\n/**\n * Merge the current object of variables with an extender object. Variables\n * defined in extender will override variables defined in the current variables,\n * if there is overlap. Nested variables are taken into account.\n * @param {Object} current - the original variable object\n * @param {Object} extender - the extender variable object, containing overrides\n * @returns {Object} - the merged variables\n */\nconst merge = (current, extender) => {\n  const merged = JSON.parse(JSON.stringify(current));\n\n  Object.keys(extender).forEach(k => {\n    // Handle nested variables\n    if (isObject(current[k]) && isObject(extender[k])) {\n      merged[k] = merge(current[k], extender[k]);\n    }\n    else {\n      merged[k] = JSON.parse(JSON.stringify(extender[k]));\n    }\n  });\n\n  return merged;\n};\n\n\n/**\n * Merge any number of variable objects\n * @param {...Object} variableGroups - one or many variable objects, each \n * passed as a separate parameter\n * @returns {Object} the merged variable object\n */\nexport const mergeVariables = (...variableGroups) => {\n  return variableGroups.reduce((acc, cur) => merge(acc, cur), {});\n};\n"],"names":["addOverrides","baseStyle","overrides","extended","JSON","parse","stringify","Object","entries","forEach","k","v","findUndefined","undefined","Array","isArray","undefinedValues","keys","map","key","undefinedProps","filter","length","validateLayer","layer","messages","undefinedProp","getLayerBuildErrorMessage","error","name","path","stack","lineNumber","split","layerFile","fs","readFileSync","layerLine","chalk","red","bold","blue","message","getFileLoadErrorMessage","fileType","logValidationMessages","style","validationMessages","console","warn","loadLayerBuilder","require","Error","loadStyle","buildLayer","context","builder","buildStyle","stylePath","layerDir","options","basename","verbose","resolve","template","styleJson","log","layers","layerName","layerPath","layerValidationMessages","isObject","merge","current","extender","merged","mergeVariables","variableGroups","reduce","acc","cur"],"version":3,"file":"main.js.map","sourceRoot":"../"}