#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');
const { format } = require('mapbox-gl-style-format');

const { buildStyle } = require('../dist/main');

const argv = yargs(hideBin(process.argv))
  .usage('Usage: $0 indir outdir')
  .option('style-dir', {
    alias: 'styleDir',
    default: 'templates/styles',
    describe: 'The input style directory',
    type: 'string'
  })
  .option('layer-dir', {
    alias: 'layerDir',
    default: 'templates/layers',
    describe: 'The input layer directory',
    type: 'string'
  })
  .option('out-dir', {
    alias: 'outDir',
    default: 'build',
    describe: 'The output directory',
    type: 'string'
  })
  .option('v', {
    alias: 'verbose',
    default: false,
    describe: 'Produce verbose output',
    type: 'boolean'
  })
  .example(
    `$0
\t--style-dir=templates/styles
\t--layer-dir=templates/layers
\t--out-dir=build`
  )
  .parse();

// return list of files with paths
const getStylePaths = dirPath => {
  let basePath = dirPath;
  return fs.readdirSync(dirPath).reduce((acc, location) => {
    basePath = `${dirPath}/${location}`;
    const isDir = fs.lstatSync(basePath).isDirectory();

    if (isDir) {
      acc = acc.concat(getStylePaths(basePath));
      return acc;
    }

    if (!location.match(/\.js$/)) return acc;

    acc.push(basePath);

    return acc;
  }, []);
};

const buildStyles = (styleDir, layerDir, outputDir, options = {}) => {
  const verbose = options?.verbose ?? false;

  const stylePaths = getStylePaths(styleDir);

  stylePaths.forEach(stylePath => {
    let trimmedPath = stylePath
      .replace(`${styleDir}/`, '')
      .replace(/\.js$/, '');

    const styleOutputDir = path.resolve(outputDir, trimmedPath);

    if (!fs.existsSync(styleOutputDir)) {
      fs.mkdirSync(styleOutputDir, { recursive: true });
    }

    try {
      const builtStyle = format(buildStyle(stylePath, layerDir, options));
      fs.writeFileSync(path.resolve(styleOutputDir, 'style.json'), builtStyle);
    } catch (e) {
      // We catch errors here rather than the default, which
      // prints stack traces
      console.error(e.message);
      process.exit(1);
    }
  });
};

const { styleDir, layerDir, outDir, verbose } = argv;

buildStyles(styleDir, layerDir, outDir, { verbose });
