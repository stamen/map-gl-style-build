#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const fg = require('fast-glob');
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');
const { format } = require('mapbox-gl-style-format');

const { buildStyle } = require('../dist/main');

const argv = yargs(hideBin(process.argv))
  .usage('Usage: $0 indir outdir')
  .option('style-dir', {
    alias: 'styleDir',
    default: 'templates/styles',
    describe: 'The input style directory',
    type: 'string'
  })
  .option('layer-dir', {
    alias: 'layerDir',
    default: 'templates/layers',
    describe: 'The input layer directory',
    type: 'string'
  })
  .option('out-dir', {
    alias: 'outDir',
    default: 'build',
    describe: 'The output directory',
    type: 'string'
  })
  .option('v', {
    alias: 'verbose',
    default: false,
    describe: 'Produce verbose output',
    type: 'boolean'
  })
  .example(
    `$0
\t--style-dir=templates/styles
\t--layer-dir=templates/layers
\t--out-dir=build`
  )
  .parse();

const buildStyles = async (styleDir, layerDir, outputDir, options = {}) => {
  const stylePaths = await fg([path.resolve(`${styleDir}/**/*.js`)]);

  let unusedCount = {};
  stylePaths.forEach(absoluteStylePath => {
    const relativePath = path.relative(styleDir, absoluteStylePath);
    const { dir, name } = path.parse(relativePath);
    const styleOutputDir = path.resolve(outputDir, dir, name);

    if (!fs.existsSync(styleOutputDir)) {
      fs.mkdirSync(styleOutputDir, { recursive: true });
    }

    try {
      // Passing in the relativePath as the style name so users can easily find issues
      let { styleJson: builtStyle, unusedContextPaths } = buildStyle(
        relativePath,
        absoluteStylePath,
        layerDir,
        options
      );
      builtStyle = format(builtStyle);

      unusedContextPaths.forEach(p => {
        if (unusedCount[p]) {
          unusedCount[p] = unusedCount[p] + 1;
        } else {
          unusedCount[p] = 1;
        }
      });

      fs.writeFileSync(path.resolve(styleOutputDir, 'style.json'), builtStyle);
    } catch (e) {
      // We catch errors here rather than the default, which
      // prints stack traces
      console.error(e.message);
      process.exit(1);
    }
  });

  const neverUsedVars = Object.entries(unusedCount).reduce((acc, kv) => {
    const [k, v] = kv;
    if (v === stylePaths.length) {
      acc = acc.concat([k]);
    }
    return acc;
  }, []);

  console.log(neverUsedVars);
};

const { styleDir, layerDir, outDir, verbose } = argv;

buildStyles(styleDir, layerDir, outDir, { verbose });
