#!/usr/bin/env node

const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');

const { buildStyles } = require('../dist/main');

const argv = yargs(hideBin(process.argv))
  .usage('Usage: $0 indir outdir')
  .option('style-dir', {
    alias: 'styleDir',
    default: 'templates/styles',
    describe: 'The input style directory',
    type: 'string'
  })
  .option('layer-dir', {
    alias: 'layerDir',
    default: 'templates/layers',
    describe: 'The input layer directory',
    type: 'string'
  })
  .option('out-dir', {
    alias: 'outDir',
    default: 'build',
    describe: 'The output directory',
    type: 'string'
  })
  .option('v', {
    alias: 'verbose',
    default: false,
    describe: 'Produce verbose output',
    type: 'boolean'
  })
  .option('include', {
    alias: 'include',
    default: '',
    describe: 'Files to include',
    type: 'string'
  })
  .option('exclude', {
    alias: 'exclude',
    default: '',
    describe: 'Files to exclude',
    type: 'string'
  })
  .example(
    `$0
\t--style-dir=templates/styles
\t--layer-dir=templates/layers
\t--out-dir=build`
  )
  .parse();

const rawArgs = process.argv;

// We need to use the raw arguments here to get the order correct
const includeExcludeArgs = rawArgs
  .filter(c => c.startsWith('--include') || c.startsWith('--exclude'))
  .map(c => {
    let [flag, pathPattern] = c.split('=');
    flag = flag.replaceAll('--', '');
    return { flag, pathPattern };
  });

const { styleDir, layerDir, outDir, verbose } = argv;

buildStyles(styleDir, layerDir, outDir, {
  verbose,
  includeExcludePaths: includeExcludeArgs
});
